<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brandon Invergo]]></title>
  <link href="http://brandon.invergo.net/atom.xml" rel="self"/>
  <link href="http://brandon.invergo.net/"/>
  <updated>2015-01-17 13:09
</updated>
  <id>http://brandon.invergo.net/</id>
  <author>
    <name><![CDATA[Brandon Invergo]]></name>
    <email><![CDATA[brandon@invergo.net]]></email>
  </author>
  <generator uri="https://github.com/datagrok/m4-bakery/">m4-bakery</generator>



  <entry>
    <title type="html"><![CDATA[Release of Grotesque 0.9.5]]></title>
    <link href="http://brandon.invergo.net/news/2015-01-17-Release-of-Grotesque-0.9.5.html"/>
    <updated>2015-01-17 12:51</updated>
    <id>http://brandon.invergo.net/news/2015-01-17-Release-of-Grotesque-0.9.5.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the release of Grotesque 0.9.5. Grotesque is an
interactive fiction library manager for GNU/Linux. It allows you to
easily explore your collection by author, genre, year of release, etc.</p>

<p>This is a minor bug fix release, resolving two issues:</p>

<ul>
<li>There was an unintentional hard-dependency on the gnome icon
theme. Icon usage (for buttons in the user interface) should now be
a lot more general. It should at least work with the gnome, Adwaita,
and Oxygen icon sets. Please let me know if you still have problems.</li>
<li>The default window size has been increased. Previously, it would
open with too small of dimensions, causing some elements of the user
interface to be truncated. The new default size avoids this.  Note:
the application saves the window dimensions when it closes, so this
should only affect the first time you launch the program.[/list]</li>
</ul>

<p>Grotesque requires Python 2, python-gobject, and GTK+ 3.</p>

<ul>
<li><a href="http://grotesque.invergo.net/download/grotesque-0.9.5.tar.gz">Download</a></li>
<li><a href="http://grotesque.invergo.net">Website</a></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of Grotesque 0.9.4 and pyifbabel 0.4]]></title>
    <link href="http://brandon.invergo.net/news/2014-10-27-Release-of-Grotesque-0.9.4-and-pyifbabel-0.4.html"/>
    <updated>2014-10-27 19:59</updated>
    <id>http://brandon.invergo.net/news/2014-10-27-Release-of-Grotesque-0.9.4-and-pyifbabel-0.4.html</id>
    <content type="html"><![CDATA[<p></p>

<p>After an unfortunately long period of time, I'm happy to announce the
release of <a href="http://grotesque.invergo.net">Grotesque</a> 0.9.4 and
<a href="http://pyifbabel.invergo.net">pyifbabel</a> 0.4. See below for the
release notes (important in this case). There aren't many new features
but it's an essential step towards having a more robust architecture
for the program.</p>

<p>Grotesque is a interactive fiction library manager, used to organize
and quickly browse your stories. It features automatic detection of
metadata for stories and, lacking that, it fetches the metadata and
cover art from IFDB. pyifbabel is a development library used by
Grotesque to implement the functions related to the Treaty of Babel
for identifying interactive fiction files. Grotesque 0.9.4 (and all
future versions) depends on pyifbabel 0.4 or higher. Because pyifbabel
was formerly a part of Grotesque, if you're updating Grotesque you may
have to uninstall the old version before installing the new ones, or
else it may complain of file conflicts.</p>

<p>Currently, only a Python source distribution of both are available,
which should work fine on GNU/Linux systems and maybe Mac with the
correct libraries (see below). Previously I provided self-contained
Windows executables. Unfortunately, I have limited time to work on
Grotesque, time that I would prefer to spend moving the project
forwards, so I can't dedicate myself to putting together a Windows
release anymore. However, if there is anyone out there who is familiar
with Python development and who would like to assemble (and test and
maybe help debug) an executable (prob. using py2exe or something like
it), I would be happy to lend my support. Knowing how to code in
Python isn't strictly necessary but it would help. Please get in touch
if you're interested.</p>

<p>Downloads:</p>

<ul>
<li><a href="Grotesque 0.9.4">http://grotesque.invergo.net/download/grotesque-0.9.4.tar.gz</a></li>
<li><a href="pyifbabel 0.4">http://pyifbabel.invergo.net/download/pyifbabel-0.4.tar.gz</a></li>
</ul>

<p>Grotesque also requires GTK+ 3 (any version should be fine) and
pygobject (aka python-gobject). Both Grotesque and pyifbabel are based
on Python 2; Python 3 is not yet supported, but I plan to migrate to
it next, since I'm tired of fighting Unicode in python2.</p>

<p>If you encounter any bugs, please fill out a bug report at the
respective pages of the two projects (you can log in as "anonymous" to
do so).</p>

<h3>Grotesque 0.9.4 news</h3>

<p>This was aimed to be strictly a bug-fix release. It has been over two
years since the last release and the program was no longer running
with recent versions of GTK+. In truth, I started and stopped
development a few times over the last couple of years and always got
disheartened. The unfortunate fact is that I made some poor design
decisions when I first took over development of Grotesque (it was my
first big Python project), which have turned out to make the
underlying architecture fragile and difficult to extend. The whole
point of the current 0.9.4 release and the planned 0.10 release that
I'm about to start is to replace the underlying bits with something of
more stable, extensible and sane design. There are many remaining bugs
and open feature requests, but I cannot seriously approach them until
I finish with this bit.</p>

<p>If you're already using Grotesque, the current release should have no
problem loading your library, but I will warn you now that the next
release will be incompatible. However, the current release provides a
library export function that saves it to an IFiction text file, which
also retains all of your annotation in Grotesque (e.g. played status,
date added, etc.). You will then be able to import the IFiction file
into the next version. I apologize for the inconvenience, but the only
other way to do it would lead to the build-up of even more cruft in
the code.</p>

<p><em>News</em>:</p>

<ul>
<li>pyifbabel (0.4) is a new dependency. pyifbabel was broken off into
its own package to allow other developers to more easily use it.</li>
<li>Removed support for GTK+ 2: one of the things that prevented me from
regaining development momentum was the need to maintain two
code-bases in parallel, supporting both GTK2 and GTK3. As a lone
developer with a very busy work schedule, this simply isn't
feasible. Apologies to anyone who hates GTK3.</li>
<li>Several GTK-related bugs were fixed. On my computer, at least, the
program would no longer launch due to updates to the GTK
library. These have been fixed. The program should run without any
warnings.</li>
<li>Library import/export added. Explained above</li>
<li>Story file locations are now editable. In the "Edit Story" dialog,
you can now edit the location of the story file</li>
<li>(Very) basic HTML in story metadata is parsed. I found that some
metadata pulled in from IFDB had basic HTML tags in it (like for
bold or italics text). Grotesque now parses those and formats the
text appropriately.</li>
</ul>

<h3>pyifbabel 0.4 news</h3>

<p>Not much to say here. Several small bugs were fixed and the API
fleshed out a bit more, all of which came up when updating Grotesque
to work with it.  Unless you're developing with pyifbabel, these
probably won't matter to you.</p>

<p><em>News</em>:</p>

<ul>
<li><code>treatyofbabel.ifiction</code> bugfixes and new features
<ul>
<li>Fixed a bug in reading annotations in an IFiction file</li>
<li>Fixed a bug in building nested IFiction nodes from <code>dict</code> objects</li>
<li>Added a check that the string parsed by <code>get_ifiction_dom</code> is
actually IFiction</li>
<li>Added "html" as a valid format (see upcoming Treaty of Babel
rev. 9)</li>
</ul></li>
<li><code>treatyofbabel.ifstory</code> bugfixes and new features
<ul>
<li>Accept an existing DOM document as an argument to
<code>ifstory.IFStory.to_ifiction_story_node</code></li>
<li>Moved IFDB cover art fetching to its own method in
<code>ifstory.IFStory</code>.</li>
</ul></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2014.10.11]]></title>
    <link href="http://brandon.invergo.net/news/2014-10-12-Release-of-GSRC-2014.10.11.html"/>
    <updated>2014-10-12 13:17</updated>
    <id>http://brandon.invergo.net/news/2014-10-12-Release-of-GSRC-2014.10.11.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the 2014.10.11 release of GSRC, the GNU Source
Release Collection. GSRC is a convenient means to fetch, build and
install the latest GNU software from source via a BSD Ports-like system.
Installing a package is as simple as</p>

<pre><code>$ make -C gnu/hello install
</code></pre>

<p>You can find more information and the documentation at the
<a href="http://www.gnu.org/software/gsrc">GSRC website</a>.</p>

<p>This release is a snapshot of the state of released GNU software at
this time. You can download this release at
<a href="http://ftp.gnu.org/gnu/gsrc">http://ftp.gnu.org/gnu/gsrc</a> or, you can
download it from the <a href="http://ftpmirror.gnu.org/gsrc/">nearest mirror</a>.</p>

<p>Of course, to stay up-to-date with the latest package releases
in-between releases of GSRC, you may choose instead to checkout the
bzr repository:</p>

<pre><code>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc
</code></pre>

<p>And keep up-to-date with the latest releases:</p>

<pre><code>$ bzr update
</code></pre>

<p>If you encounter any problems with a build script, please let me know
at <a href="http://lists.gnu.org/mailman/listinfo/bug-gsrc">bug-gsrc@gnu.org</a>.</p>

<h3>NEWS</h3>

<ul>
<li>Changes to the GSRC system
<ul>
<li>Bugfix: Uninstallation of packages without info files. GSRC will
no longer try to remove info files if they aren't installed.  This
would prevent the uninstallation procedure from completing.</li>
<li>Bugfix: Trailing whitespace from relevant package metadata is
stripped.  Trailing whitespace on the GARNAME, GARPROFILE, and
GARVERSION variables is explicitly stripped to prevent bugs when
the shell tries to operate on path names derived from some
combination of their values. </li>
</ul></li>
<li>Changes in GSRC packages
<ul>
<li>2 packages have been added to GSRC since the last release</li>
<li>49 packages have been updated since the last release</li>
<li>Coverage statistics (Note: the totals include packages that will
not be implemented in GSRC, such as retired packages, which are
counted as completed. Broken builds are counted as
incomplete. Some packages have not yet made any releases, which
are also counted as incomplete. See TODO for more information.) 
<ul>
<li>GNU packages [424/473] [89%]</li>
<li>GNOME packages</li>
<li>Core [15/116] [12%]</li>
<li>Apps [1/44] [2%]</li>
<li>GNUstep packages [22/28] [78%]</li>
</ul></li>
<li>New packages (most recent version given)
<ul>
<li>datamash (1.0.5)</li>
<li>direvent (5.0)</li>
</ul></li>
<li>Updated packages (most recent version given)
<ul>
<li>apl (1.4)</li>
<li>bash (4.3-30)</li>
<li>chess (6.1.2)</li>
<li>coreutils (8.23)</li>
<li>cssc (1.4.0)</li>
<li>datamash (1.0.6)</li>
<li>ddrescue (1.19)</li>
<li>denemo (1.1.8)</li>
<li>easejs (0.2.4)</li>
<li>emms (4.0)</li>
<li>freeipmi (1.4.5)</li>
<li>gcc (4.9.1)</li>
<li>gcl (2.6.11)</li>
<li>gdb (7.8)</li>
<li>gettext (0.19.2)</li>
<li>gforth (0.7.3)</li>
<li>global (6.3.2)</li>
<li>glpk (4.55)</li>
<li>gnubg (1.03.001)</li>
<li>gnucash (2.6.4)</li>
<li>gnudos (1.7)</li>
<li>gnupg (2.0.26)</li>
<li>gnutls (3.3.8)</li>
<li>gss (1.0.3)</li>
<li>gtypist (2.9.5)</li>
<li>guile-ncurses (1.5)</li>
<li>help2man (1.46.3)</li>
<li>libc (2.20)</li>
<li>libgcrypt (1.6.2)</li>
<li>libidn (1.29)</li>
<li>librejs (6.0.1)</li>
<li>libtasn1 (4.2)</li>
<li>libunistring (0.9.4)</li>
<li>lightning (2.0.5)</li>
<li>lilypond (2.19.1)</li>
<li>linux-libre (3.16)</li>
<li>make (4.1)</li>
<li>mdk (1.2.8)</li>
<li>mediagoblin (0.7.1)</li>
<li>nano (2.3.6)</li>
<li>ocrad (0.24)</li>
<li>octave (3.8.2)</li>
<li>parallel (20140922)</li>
<li>parted (3.2)</li>
<li>pspp (0.8.4)</li>
<li>rcs (5.9.3)</li>
<li>swbis (1.12)</li>
<li>tar (1.28)</li>
<li>ucommon (6.1.11)</li>
</ul></li>
</ul></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Data formatting and distribution tips for biologists]]></title>
    <link href="http://brandon.invergo.net/news/2014-06-23-Data-formatting-and-distribution-tips-for-biologists.html"/>
    <updated>2014-06-23 21:05</updated>
    <id>http://brandon.invergo.net/news/2014-06-23-Data-formatting-and-distribution-tips-for-biologists.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Incredible amounts of data are now being generating in all corners of
the biological sciences.  Given the immensity of the data being
generated, we must turn to bioinformatic analyses in order to derive
knowledge from our experiences.  This process typically involves
significant amounts of data reformatting as well as
computationally intensive statistical analyses.  Thus, the most
efficient and natural way to process the data is via computer
programming.</p>

<p>Unfortunately, large datasets are still quite often being distributed
in a manner that is unfriendly to bioinformatic analysis.  While it is
sometimes a trivial task to transform the data into a usable format,
other times it results in the poor bioinformatician wanting to put his
or her fist through the monitor while cursing each name on the author
list in succession.</p>

<p>Here are a few tips for preparing data for bioinformatic analysis.
Please consider these in your collaborations and for distributing your
supplementary materials.  After all, you put all that work into
generating that amazing dataset, it would be a shame to put up
roadblocks to amazing analyses of it!</p>

<p>Note that this is coming only from my experiences on the receiving end
of data.  I have not (yet) generated any large datasets myself, so I
may indeed be missing some perspective of that side of the process.</p>

<p>If anyone has any other suggestions, please let me know and I'll add
them to this list!</p>

<h3>Make your data available in text format</h3>

<p>This is probably the number one complaint: the <em>only</em> file formats
appropriate for computational analysis are text formats.  Sure, it
might be possible to load other formats with special libraries for
certain programming languages or to convert them to text, but you
should not demand that if you don't absolutely need it (hint: you
don't).  Other formats are OK for small data tables that can be easily
reproduced by hand but for anything large (say, >50 rows) should not
be distributed as anything other than text.</p>

<p>First and foremost: never, ever, under any circumstances, distribute a
large data table in PDF format!  Never.  While PDF tables look nice
and it's convenient to have them in the same document as your
supplementary figures, it is an absolute chore to extract tabular data
from them.  Try it yourself sometime.  When a table is copied and
pasted from a PDF file, all whitespace is lost between columns.
Depending on the structure of the text in the table, it might be
essentially impossible to reliably separate each of the columns
without having to visually verify against the PDF file at every step.
I'll repeat again: your nice proteomics dataset is completely useless
inside a PDF file.</p>

<p>Second: spreadsheets (MS Excel, LibreOffice Calc, etc.) are not good
data exchange formats either.  They are (essentially) closed to
programmatic access outside of their own macro languages (yes, some
libraries exist but again, don't make me download and learn to use a
library just to parse your text-only data, which is otherwise simple
to parse).  Of course, a spreadsheet can always be exported to a
comma-separated value (CSV) file, but because spreadsheets often have
some "helpful" formatting (see below), this means that a lot of work
often needs to be done to properly format the CSV file, which can be
an error-prone process.  Also, don't be so sure that everyone can open
your file.  For example, MS Excel produces files that cannot be
reliably read on other systems.  Since a lot of bioinformatics
research happens on GNU/Linux systems, it's very likely that the
people who will analyze your data will first find themselves
struggling against either the old, proprietary Excel format or the
new, obfuscated one.</p>

<p>The best solution is to make your data available as a CSV file (or a
tab-delimited file).  This will make sure that a programmer can
immediately start working with your dataset without introducing any
potential errors by unnecessary reformatting.</p>

<p>This also goes for non-tabular data.  Please don't send sequencing
results in a word processor format!  A simple text file in an
appropriate sequence format (e.g. FASTA) is immensely more useful.</p>

<p>A note on this: there are presumably some journals that require
uploading supplementary materials in one of these inappropriate
formats.  The first thing that we should do is make them aware of the
inappropriateness of their policy.  Second, if they will not let you
also upload the text file, make sure that it is available for download
somewhere on the web (and that you make this fact known).</p>

<h3>Don't format your tables to be visually appealing</h3>

<p>By this, I mean don't try to format your data table to make browsing
it easier.  For example, one might put table super-headers spanning
two columns to visually connect them, or one could have "sub-rows" or
other summary rows adding information to a row above them.  All rows
should have the same meaning, <em>e.g.</em> if you know how to read one row,
you know you can read any other row in the same way.</p>

<p>The key to understanding this is understanding the difference between
how a human reads a table and how a computer reads it.  The above
tricks are really great for humans.  Proper table structure allows us
to take in a lot of information at a glance, however computers have no
good way of analyzing a table in that way.  When a table is read in by
a computer, it does so line-by-line.  Each line is then split into
cells (say, by splitting at all the commas, or at all the tab
characters), and then each column is handled independently.  Thus, any
context established between columns or contained in previous lines
(or, worse, in lines not yet read) requires needless programming
effort to maintain.</p>

<p>Also, please do not hide information by depending on formatting tricks
such as cell coloring!  For example, if the rows can be classified by
applying a threshold to some column of data, do not simply color those
cells of data to indicate the results of the classification.  A
program will have no way of getting that information.  Instead, you
should add a column to the table specifying the classification.</p>

<p>So remember, if your data will be analyzed computationally, make it
beautiful for computers not for humans!</p>

<h3>Don't throw out data</h3>

<p>Of course, it's difficult to be sure just how often this happens but I
have definitely seen it.  When a lot of biological data is generated,
often a lot of it is not at all necessary for your immediate analysis
needs.  However, one scientist's junk is another one's treasure.  So,
don't haphazardly delete columns from your table just because you
don't think it's necessary!  Likewise, leave all of the raw data from
which you made your calculations.  Let the future users of your data
decide what they need.</p>

<h3>Make your data available elsewhere</h3>

<p>While having your data available alongside your publication as
supplementary information is useful, a lot of the above problems can
be alleviated by also making your data available from public
repositories.  These will usually have fairly strict standards, so
that anyone downloading from them can safely expect the data to be in
a useful format.  This also neatly sidesteps any unreasonable format
restrictions imposed by the publisher.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Biting the bullet and rejoining a social network]]></title>
    <link href="http://brandon.invergo.net/news/2014-06-13-Biting-the-bullet.html"/>
    <updated>2014-06-13 20:28</updated>
    <id>http://brandon.invergo.net/news/2014-06-13-Biting-the-bullet.html</id>
    <content type="html"><![CDATA[<p></p>

<p>A couple of years ago, I decided to
<a href="http://brandon.invergo.net/news/2012-01-25-so-long.html">delete all of my social networking accounts</a>.
In general, I have been very happy with that decision.  However, I am
finding that, for various reasons, it would be advantageous for me to
have at least one social networking outlet.  On the professional side
of things, there is a large, ongoing conversation between biologists
and other scientists that occurs online from which I have been
isolated.  As I advance in my career, I cannot afford to miss out on
such interactions.  On the personal side, it would be nice to have
another outlet for announcing my various activities (esp. software
releases).  To this end, I have decided to re-activate my old Twitter
account, <a href="https://twitter.com/brandoninvergo">@brandoninvergo</a>.</p>

<p>While professional reasons play perhaps the largest part in this
decision, I absolutely refuse to hide my <em>non-professional</em> interests
and activities.  To do so would be to deny huge parts of my life,
which is not acceptable.  Thus, while you can expect to see a lot of
biology-related posts, do not be surprised to see me simply being me.
That said, I also will not be posting any <em>unprofessional</em> things.</p>

<p>I still believe that there is no example of "good social networking"
online today.  It is bad for many reasons, not the least of which is
user tracking/profiling, which is reprehensible.  I immediately
noticed that Twitter was suggesting users to me whom I had previously
followed.  Other friends managed to find me before I found them,
literally within <em>minutes</em> of me joining.  How could this have been
possible, if not for Twitter keeping track of such relationships for
over <em>two years</em>, even after deleting my account?</p>

<p>I also find social networking to be predominantly a source of noise
(especially now that apparently Twitter serves
<del>advertisements</del> "promoted tweets"), which I prefer to avoid.
Most of the conversation online, in any venue, is garbage and adds
little to one's life.  I will try to do my part in increasing the
general signal-to-noise ratio.</p>

<p>Lastly, for something as simple as Twitter, I cannot believe how much
crap JavaScript it loads, so of course, I am using Emacs to interface
with it.  I would much prefer to use something more
<a href="https://gnu.org/philosophy/free-sw.html">freedom-respecting</a>, like
<a href="http://gnu.io">GNU Social</a> (formerly StatusNet) and, indeed, I might
sign up on an instance of it somewhere; but, unfortunately, the
biology presence on it seems to be rather low.  So, for now, Twitter
is the least-bad solution.</p>

<p>As you can see, I am not 100% happy about going back into social
networking, but in the long run, I do see some good that can come out
of it.  Thus, I approach the opportunity with some guarded optimism
and I do look forward to some interesting interactions with others.
Follow me if you're interested, otherwise in any case this website
will still be my main online presence, so do keep an eye on it!</p>

<p><em>Edit: For the more ethically minded, I did end up setting up a
 <a href="https://quitter.se/brandoninvergo">GNU Social-based account on quitter.se</a>.</em></p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of paperq 1.2.2]]></title>
    <link href="http://brandon.invergo.net/news/2014-06-09-Release-of-paperq-1.2.2.html"/>
    <updated>2014-06-09 21:23</updated>
    <id>http://brandon.invergo.net/news/2014-06-09-Release-of-paperq-1.2.2.html</id>
    <content type="html"><![CDATA[<p></p>

<p><em>EDIT: Note that another quick bugfix release, 1.2.3, was released
 shortly after this post was made.  You should definitely install
 paperq 1.2.3.</em></p>

<p>I'm pleased to announce the release of
<a href="http://paperq.invergo.net">paperq</a> 1.2.2.  This is a bug-fix release.</p>

<p>paperq is a simple command-line tool for managing a reading queue,
aimed primarily for use with academic literature.  It nicely formats
bibliographic information contained in BibTeX files.  paperq supports
the basic expected features like adding/removing files to/from the
queue, opening the next file in the queue, and operating on items
further back in the queue.  It also handles printing documents and
creating archives (gzipped tarballs) of the queue.  It is aimed at
researchers who want a simple solution to keeping track of a digital
pile of papers to be read, but who don't want to deal with massive,
clunky, proprietary solutions.  I use it to great effect in
combination with <a href="http://www.molspaces.com/cb2bib/">cb2bib</a> for
bibliography metadata extraction/search and
<a href="http://orgmode.org">org-mode</a> for note-taking.</p>

<p>This release includes fixes for bugs when handling an empty queue and
for displaying bibliographic information for articles with single
authors (the biology articles that I read typically have many authors,
so I completely missed this!).  It also permits the customization of
the command used to print documents (by default, just <code>lp %s</code>).  See
the <code>NEWS</code> file for more information.</p>

<p>You can download the latest release
<a href="http://paperq.invergo.net/download">here</a>.  You can verify that the
download is legit by also downloading the associated signature file
and running <code>gpg --verify paperq-1.2.2.tar.gz.sig</code> on it.</p>

<p>Enjoy!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Auto-inserting usernames and passwords from gnu-pw-mgr in Conkeror]]></title>
    <link href="http://brandon.invergo.net/news/2014-04-24-Auto-inserting-usernames-and-passwords-from-gnu-pw-mgr-in-Conkeror.html"/>
    <updated>2014-04-24 22:10</updated>
    <id>http://brandon.invergo.net/news/2014-04-24-Auto-inserting-usernames-and-passwords-from-gnu-pw-mgr-in-Conkeror.html</id>
    <content type="html"><![CDATA[<p></p>

<p>For anyone out there who's using <a href="http://www.conkeror.org">Conkeror</a>
as their main browser, I've written some functions to easily insert
usernames and passwords from
<a href="http://www.gnu.org/s/gnu-pw-mgr">gnu-pw-mgr</a> into login forms.  If
you're not familiar with Conkeror, it's an XULRunner-based browser
(like Firefox), that's modeled after Emacs, albeit implemented in
javascript rather than lisp.  Unfortunately, my experience with
javascript is limited to, well, these functions, so perhaps they can
be improved a bit.  Anyway, they work for me.</p>

<p>To use them, either put the script in your <code>.conkerorrc</code> directory or,
if <code>.conkerorrc</code> is a file, just copy the function definitions into
it.</p>

<p>Everything is available on
<a href="https://gitorious.org/bi-scripts/conkeror-gnu-pw-mgr">Gitorious</a>.</p>

<p>Executive summary:</p>

<table>
<tr>
<td>Command</td><td>Function</td><td>Description</td>
</tr>
<tr>
<td><code>C-x n</code></td><td><code>gnu-pw-mgr-get-user</code></td><td>Insert a username in the current field.</td>
</tr>
<tr>
<td><code>C-x p</code></td><td><code>gnu-pw-mgr-get-pass</code></td><td>Insert a password in the current field.</td>
</tr>
<tr>
<td><code>C-x P</code></td><td><code>gnu-pw-mgr-get-user-pass</code></td><td>Insert a username
in the current field, advance to the next field, and then insert the
corresponding password.</td>
</tr>
</table>

<p>When you run them, you'll be prompted to enter a password ID.  Of
course, you need to run these commands when the appropriate form field
is focused.  By default the password associated with the most recent
seed is used.  To select a different seed, prefix the command with the
universal argument: e.g., to use the first seed, do <code>C-u 1 C-x p</code>.</p>

<p>Be warned that Paypal and presumably other sites are doing some
asinine thing with javascript so that the password field only hides
the input when entered via the keyboard; thus, using the above
functions results in your password being visible, which is annoying.
Anyway, a 20-character gnu-pw-mgr-derived password that's only visible
momentarily probably won't be remembered by prying eyes.  But if
anyone finds a way around it, I'd be happy to hear it.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of pyifbabel 0.3]]></title>
    <link href="http://brandon.invergo.net/news/2014-04-07-Release-of-pyifbabel-0.3.html"/>
    <updated>2014-04-07 22:39</updated>
    <id>http://brandon.invergo.net/news/2014-04-07-Release-of-pyifbabel-0.3.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've just released version 0.3 of
<a href="http://pyifbabel.invergo.net">pyifbabel</a>, a pure Python library
implementing functions for determining, reading, and writing
bibliographic data for interactive fiction files, as defined by the
<a href="http://babel.ifarchive.org">Treaty of Babel</a>. It contains three
primary modules: treatyofbabel, for deducing bibliographic data of
story files; treatyofbabel.ifiction, for reading and writing IFiction
XML files; and treatyofbabel.ifstory, implementing the IFStory class,
for handling bibliographic data in an object-oriented manner.</p>

<p>New in this release:</p>

<ul>
<li>Support for the cover art description tag in IFiction files</li>
<li>Support for reading cover art descriptions in blorbed files</li>
<li>Support for creating basic blorbs consisting of a story file, an
IFiction file and (optional) a cover file</li>
<li>All functions that were previously in treatyofbabel.babel are now in
treatyofbabel (i.e. just 'import treatyofbabel', now, rather than
'import treatyofbabel.babel' or 'from treatyofbabel import babel'</li>
<li>Major de-linting and PEP8-ing of the code</li>
<li>Comments and docstrings added for all user-facing modules and functions</li>
</ul>

<p>Note that this library is still effectively beta, meaning the API
might change a bit, particularly in the IFiction file handling, which
will probably (unfortunately) need to be rewritten in order to be able
to provide proper checking/linting. Other than that, the two big
"to-do" items before a 1.0 release are adding support for Python 3 and
writing some documentation finally (all though, with the docstrings
added in this release, future documentation should be pretty simple).</p>

<p>You can download pyifbabel
<a href="http://pyifbabel.invergo.net/download/pyifbabel-0.3.tar.gz">here</a> or
you can install it via PyPI. If you have any problems, let me know!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of pyconfigure 0.2.2]]></title>
    <link href="http://brandon.invergo.net/news/2014-04-07-Release-of-pyconfigure-0.2.2.html"/>
    <updated>2014-04-07 22:41</updated>
    <id>http://brandon.invergo.net/news/2014-04-07-Release-of-pyconfigure-0.2.2.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I am pleased to announce the release of GNU pyconfigure 0.2.2.</p>

<p><a href="http://www.gnu.org/s/pyconfigure">GNU pyconfigure</a> is a set of
template files for Python developers to use to easily implement the
standard GNU configure/install process for their packages. The
standard GNU process generally consists of two familiar steps:</p>

<pre><code>$ ./configure --prefix=/usr/ $ make install
</code></pre>

<p>By using the templates provided by GNU pyconfigure, the Python
developer gains the power and flexibility of the time-tested,
language-agnostic GNU installation process, while the user or the
software packager encounters a familiar and convenient interface.</p>

<p>GNU pyconfigure is designed to work either alongside of or in place of
the Python 'distutils' module's setup.py script. Thus, if your project
already has a setup.py script, pyconfigure can simply wrap its
functionality, leveraging the work you have already done.</p>

<p>To learn more and to read the documentation, visit the website at:
<a href="http://www.gnu.org/software/pyconfigure">http://www.gnu.org/software/pyconfigure</a></p>

<p>You may download the release from
<a href="http://ftp.gnu.org/gnu/pyconfigure/">http://ftp.gnu.org/gnu/pyconfigure/</a></p>

<p>You may also download from your nearest mirror at
<a href="http://ftpmirror.gnu.org/pyconfigure/">http://ftpmirror.gnu.org/pyconfigure/</a></p>

<p>Here are the compressed sources and a GPG detached signature[*]:</p>

<pre><code>pyconfigure/pyconfigure-0.2.2.tar.gz  
pyconfigure/pyconfigure-0.2.2.tar.gz.sig
</code></pre>

<p>Here are the MD5 and SHA1 checksums:</p>

<pre><code>1f0aaa6060ce4a783a95fcb789c0eacf pyconfigure-0.2.2.tar.gz  
bf68b579589f6b8831a667246b0f904195f59c8c pyconfigure-0.2.2.tar.gz
</code></pre>

<p>[*] Use a .sig file to verify that the corresponding file (without the
.sig suffix) is intact. First, be sure to download both the .sig file
and the corresponding tarball. Then, run a command like this:</p>

<pre><code>gpg --verify pyconfigure-0.2.1.tar.gz.sig
</code></pre>

<p>If that command fails because you don't have the required public key,
then run this command to import it:</p>

<pre><code>gpg --keyserver keys.gnupg.net --recv-keys EB7AB74D
</code></pre>

<p>and rerun the 'gpg --verify' command.</p>

<p>NEWS</p>

<p>This release is a bugfix release fixing a critical bug in the Python
M4 macros.</p>

<ul>
<li>pkgpythondir and pkgpyexecdir are correctly constructed.  In some
cases, the package name was not being appended to these variables,
which could have some nasty effects if used blindly. This has been
fixed.</li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2014.04.06]]></title>
    <link href="http://brandon.invergo.net/news/2014-04-06-Release-of-GSRC-2014.04.06.html"/>
    <updated>2014-04-06 19:26</updated>
    <id>http://brandon.invergo.net/news/2014-04-06-Release-of-GSRC-2014.04.06.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the 2014.04.06 release of GSRC, the GNU Source
Release Collection. GSRC is a convenient means to fetch, build and
install the latest GNU software from source via a BSD Ports-like system.
Installing a package is as simple as</p>

<pre><code>$ make -C gnu/hello install
</code></pre>

<p>You can find more information and the documentation at the GSRC website:
http://www.gnu.org/software/gsrc</p>

<p>This release is a snapshot of the state of released GNU software at this
time. You can download this release at http://ftp.gnu.org/gnu/gsrc or,
you can download it from the nearest mirror at
http://ftpmirror.gnu.org/gsrc/</p>

<p>Of course, to stay up-to-date with the latest package releases
in-between releases of GSRC, you may choose instead to checkout the bzr
repository:</p>

<pre><code>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc
</code></pre>

<p>And keep up-to-date with the latest releases:</p>

<pre><code>$ bzr update
</code></pre>

<p>If you encounter any problems with a build script, please let me know
at <a href="mailto:bug-gsrc@gnu.org">bug-gsrc@gnu.org</a>.</p>

<p>NEWS</p>

<ul>
<li>Changes in GSRC packages
<ul>
<li>3 packages have been added to GSRC since the last release</li>
<li>60 packages have been updated since the last release</li>
<li>Coverage statistics</li>
<li>GNU packages [418/469] [89%]</li>
<li>GNOME packages
<ul>
<li>Core [15/116] [12%]</li>
<li>Apps [1/44] [2%]</li>
</ul></li>
<li>GNUstep packages [22/28] [78%]</li>
<li>New packages</li>
<li>cursynth (1.4)</li>
<li>gnucobol (1.1)</li>
<li>rpge (0.0.3)</li>
<li>Updated packages</li>
<li>apl (1.3)</li>
<li>aris (2.2)</li>
<li>autoconf-archive (2014.02.28)</li>
<li>bash (4.3-8)</li>
<li>ccd2cue (0.3)</li>
<li>ccrtp (2.0.8)</li>
<li>cgicc (3.2.13)</li>
<li>dap (3.9)</li>
<li>denemo (1.1.2)</li>
<li>ed (1.10)</li>
<li>fisicalab (0.3.4)</li>
<li>freeipmi (1.4.1)</li>
<li>gama (1.15)</li>
<li>gdb (7.7)</li>
<li>gettext (0.18.3.2)</li>
<li>global (6.2.11)</li>
<li>glpk (4.54)</li>
<li>gmp (6.0.0)</li>
<li>gnu-pw-mgr (1.2)</li>
<li>gnucash (2.6.3)</li>
<li>gnun (0.8)</li>
<li>gnuradio (3.7.3)</li>
<li>gnushogi (1.4.2)</li>
<li>gnustandards (2014)</li>
<li>gnutls (3.2.12.1)</li>
<li>grep (2.18)</li>
<li>gtypist (2.9.4)</li>
<li>guile (2.0.11)</li>
<li>gxmessage (3.4.0)</li>
<li>help2man (1.45.1)</li>
<li>inetutils (1.9.2)</li>
<li>libc (2.19)</li>
<li>libgcrypt (1.6.1)</li>
<li>libmicrohttpd (0.9.34)</li>
<li>librejs (6.0)</li>
<li>lightning (2.0.3)</li>
<li>lilypond (2.18.0)</li>
<li>linux-libre (3.14)</li>
<li>liquidwar6 (0.4.3681)</li>
<li>melting (5.1.1)</li>
<li>motti (3.1.0)</li>
<li>mpc (1.0.2)</li>
<li>ocrad (0.23)</li>
<li>octave (3.8.1)</li>
<li>osip (4.1.0)</li>
<li>parallel (20140322)</li>
<li>pspp (0.8.2)</li>
<li>readline (6.3)</li>
<li>recutils (1.7)</li>
<li>sipwitch (1.9.0)</li>
<li>thales (1.99)</li>
<li>tramp (2.2.9)</li>
<li>ucommon (6.1.0)</li>
<li>vera (1.21a)</li>
<li>webserver (1.5.0)</li>
<li>wget (1.15)</li>
<li>xboard (4.7.3)</li>
<li>xnee (3.18)</li>
<li>xorriso (1.3.6.pl01)</li>
<li>zile (2.4.11)</li>
</ul></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Enhancing the Python interpreter with a start-up script]]></title>
    <link href="http://brandon.invergo.net/news/2014-03-21-Enhancing-the-Python-interpreter-with-a-start-up-script.html"/>
    <updated>2014-03-21 21:55</updated>
    <id>http://brandon.invergo.net/news/2014-03-21-Enhancing-the-Python-interpreter-with-a-start-up-script.html</id>
    <content type="html"><![CDATA[<p></p>

<p>It seems that many, if not most people nowadays use IPython instead of
the default Python interpreter.  I've used it briefly in the past but,
while I found a few features to be useful, such as the persistent
command history and tab-completion, I found it to be otherwise quite
bloated with features that I would never use (and which, furthermore,
employ a strange and non-Python meta-syntax).</p>

<p>It appears to be an under-appreciated fact that you can run a script
automatically when you launch the Python interpreter.  I certainly did
not know about it for some time.  Using this feature, I've found that
I can implement a few basic features in the standard Python
interpreter that greatly improve its usage (for me), without going
full hog with other features.  I have just
<a href="https://gitorious.org/bi-scripts/python-startup">made the script available on Gitorious</a>.</p>

<p>Many of its capabilities should come as no surprise to people who are
familiar with Python: tab-completion, persistent history, etc.  Others
are non-standard and required a bit of hacking to get right:
syntax-highlighted completion results, auto-indentation, and printable
functions. </p>

<p>To use this script, just set the <code>PYTHONSTARTUP</code> environment variable
to point to it, e.g. if the file is in <code>$HOME/.config/python/</code> put
this in your <code>.bashrc</code>:</p>

<pre><code>export PYTHONSTARTUP=$HOME/.config/python/python-startup.py
</code></pre>

<p>The script is compatible with both Python 2 and Python 3.</p>

<p>I highly recommend reading the code and modifying it to suit your
tastes.  Of course, if you hack up some cool new feature, I'd love to
hear about it <a href="#fn1">[1]</a>.</p>

<h2>Features</h2>

<h3>Pre-loaded modules</h3>

<p>This comes as a bit of a side-effect: in order to implement some of
the functions in the start-up script, some modules had to be imported.
The benefit of this is that you won't need to import some modules in
your interactive sessions,
particularly <code>os.path</code> and <code>sys</code>.</p>

<p>Also, for Python 2, the <code>print</code> function is imported from
<code>__future__</code>.  Additionally, the <code>pprint</code> function is automatically
imported.  <code>pprint</code> pretty-prints objects, making it much easier to
view large lists or dicts, for example.</p>

<h3>Persistent history</h3>

<p>Your command history is saved between sessions, so you can recall
commands that you previously entered.  Note that your Python 2 and
Python 3 histories are stored separately (though this is easy enough
to change if you don't want that).  By default, the command histories
are saved in <code>$HOME/.local/share/python</code>.</p>

<h3>Colorized, history-aware prompts</h3>

<p>Rather than the traditional <code>&gt;&gt;&gt;</code> (standard) and <code>...</code> (continuation)
prompts, this script provides prompts that show the current line in
the command history file.  They are also colorized: the standard
prompt is green while the continuation prompt is yellow.  These colors
are easily customized in the script.</p>

<p>Before:</p>

<pre><code>&gt;&gt;&gt; def foo(bar):
...     print(bar)
</code></pre>

<p>After (you'll have to imagine the colors in your mind):</p>

<pre><code>[26]&gt; def foo(bar):
(26)&gt;     print(bar)
</code></pre>

<h3>Highlighted tab-completion of commands</h3>

<p>When you are entering commands, you can hit the <code>&lt;Tab&gt;</code> key to
complete a command.</p>

<p>That's not terribly new and surprising.  However, this script also
highlights the completion results according to their syntactic
function: modules in yellow, functions in blue, etc.  It's
surprisingly useful.</p>

<h3>Indentation keyboard shortcuts</h3>

<p>Since indentation is so important in Python but since we are occupying
<code>&lt;Tab&gt;</code> with completion, I added some handy shortcuts to handle
indentation for you.  <code>Ctrl-j</code> will indent four spaces while <code>Ctrl-u</code>
will unindent four spaces.  These commands behave the way you would
expect: you can use them  with the cursor residing anywhere in the
line, even in the middle of text (as opposed to having to move to the
beginning of the line and entering the spaces manually) <a href="#fn2">[2]</a>.</p>

<h3>Context-specific auto-indentation</h3>

<p>To save you some keystrokes, your commands will be automatically
indented as necessary.  For example, if you enter an <code>if</code> command,
then the next line will automatically indent itself one level
inwards.  If you then unindent a level, all lines after that will be
at the new indentation level. Note that the indentation will happen as
soon as you start typing, not as soon as the prompt appears like you
might expect <a href="#fn3">[3]</a>.</p>

<h3>Printable functions</h3>

<p>This one's a bit non-standard, so it bears some explaining.  I found
that sometimes in my interactive sessions, I had forgotten the
specific details of a function definition.  However, going back
through the command history would only show it one line at a time, and
in reverse at that.  So, the start-up script provides a function
decorator, <code>saved_function</code> that allows you to recall and print the
definition of a function that was entered at the command-line
<a href="#fn4">[4]</a>.  Simply pass it the line in the command history where the
function definition will begin (i.e. the next line after the one where
the decorator is being entered).</p>

<p>For example:</p>

<pre><code>[27]&gt; @saved_function(28)
(27)&gt; def foo(bar):
(27)&gt;     print(bar)
[30]&gt; # ...other stuff...
# later... more work...hey, what does function foo do again?
[48]&gt; print(foo)
def foo(bar):
    print(bar)
</code></pre>

<h2>Footnotes:</h2>

<p><div id="fn1">
[1]  But I explicitly do not want to turn this into another iPython.</p>

<p><div id="fn2">
[2]  For some reason, the Python <code>readline</code> module is quite inflexible
in its key-bindings.  You cannot override some existing bindings for
some reason.  For example, <code>Ctrl-i</code>, which would be a natural choice
for adding to the indentation level, is inextricably tied to the
<code>&lt;Tab&gt;</code> key, causing it to always do completion, even if you try to
re-bind it.</p>

<p><div id="fn3">
[3] This is due to the nature of the Python <code>readline</code> module and, to
my knowledge, there's no way around it.  Another side effect of this
is that you will have to hit <code>&lt;Enter&gt;</code> a couple times to end a block
of code.  Imagine you enter a one-line function.  The function
definition is at indentation level 0 and the line that comprises the
body of the function will be at indentation level 1.  After you enter
the body line, if you start typing again, the text will be entered at
level 1.  However, if you just hit <code>&lt;Enter&gt;</code> to finish the block, the
<code>readline</code> module will accept that as "typing" and will first indent
to level 1 before entering the line.  The next time you hit <code>&lt;Enter&gt;</code>,
the previous blank line will be recognized by the auto-indentation
code and the block will be completed.  Again, to my knowledge, there
is no way around this behavior (but I welcome any bug-fixes for it).</p>

<p><div id="fn4">
[4]  If you want to see the definition of an imported function, you can
use the <code>getsource</code> function of the <code>inspect</code> module.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[BioSRC - a Ports-like system for easily installing bioinformatics software]]></title>
    <link href="http://brandon.invergo.net/news/2014-03-09-BioSRC---a-Ports-like-system-for-easily-installing-bioinformatics-software.html"/>
    <updated>2014-03-09 19:18</updated>
    <id>http://brandon.invergo.net/news/2014-03-09-BioSRC---a-Ports-like-system-for-easily-installing-bioinformatics-software.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Many bioinformaticians use shared computing resources (clusters), so
they do not have administrative permissions to install software
system-wide.  Instead, we manually install software to our home
directories or shared drives. Unfortunately, bioinformatics software
is usually released by biologists, not software engineers, so the
packaging standards, if there are any, generally leave something to be
desired. Often some amount of manual work needs to be done to compile
and install the software.</p>

<p>I got tired of dealing with this on a personal level and in our group
we were setting up a lot of software to be shared between us. So, I
hit on the idea of adapting another package that I maintain,
<a href="http://www.gnu.org/s/gsrc">GSRC</a>, which uses the Ports-like GARstow
system to install GNU software, to produce a dedicated system for
easily installing bioinformatics software, called
<a href="http://biosrc.invergo.net">BioSRC</a>.</p>

<p>BioSRC includes many common bioinformatics tools (under <code>pkg/bio</code>), as
well as general tools that are useful in analysis pipelines
(<code>pkg/tools</code>), bioinformatics-related libraries or
library-dependencies of other BioSRC software (<code>pkg/libs</code>) and the
latest versions of common programming languages/environments
(<code>pkg/dev</code>...really handy if, like me, your cluster only has ancient
versions of Python). New packages are being added as fast as I can and
I welcome requests (note that I'm only adding properly licensed
<a href="https://gnu.org/philosophy/free-sw.html">free software</a>...no
"academic use only", license-free, or otherwise proprietary software
will be included in BioSRC).</p>

<p>Currently there are no formal releases but rather you should just
clone the
<a href="https://gitorious.org/biosrc/biosrc">Git repository</a>. Setting up is
simple:</p>

<pre><code>$ git clone git://gitorious.org/biosrc/biosrc.git
$ cd biosrc
$ ./bootstrap
$ ./configure --prefix=/foo/bio-software
$ make install
</code></pre>

<p>The last step is optional and just installs the documentation (view it
via <code>info biosrc</code>) and a <code>biosrc</code> script (see below).</p>

<p>After that, any software can be installed easily to your chosen
directory, <code>/foo/bio-software</code> in the above example, with Make:</p>

<pre><code>$ make -C pkg/bio/ncbi-blast install
</code></pre>

<p>This will fetch the package, verify its checksums, extract it,
configure it, build it and finally install it. Under your install
prefix, packages are first installed to the <code>packages</code> directory and
their contents are then symlinked into the standard locations under
the prefix (i.e. <code>${prefix}/bin/bar</code> will be a link to
<code>${prefix}/packages/foo-1.0/bin/bar</code>). Installing a new version of a
package does not uninstall the old version; only the links are
replaced. Thus, if you still need to use the old version for whatever
reason, it remains available in the packages directory.</p>

<p>To make your life even easier, the <code>biosrc</code> script automates a lot of
stuff for you, allowing you to install, uninstall, search, display
info, etc from any directory:</p>

<pre><code>$ biosrc search alignment
$ biosrc info hmmer
$ biosrc install ncbi-blast
</code></pre>

<p>See the <a href="http://biosrc.invergo.net/doc">documentation</a> for more
information.</p>

<p>Enjoy!</p>

<p><a href="http://biosrc.invergo.net">BioSRC Website</a> <br />
<a href="http://gitorious.org/biosrc">Project site on Gitorious</a> <br />
<a href="http://lists.invergo.net/listinfo.cgi/biosrc-invergo.net">Mailing List</a></p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of paperq 1.2.1]]></title>
    <link href="http://brandon.invergo.net/news/2014-03-03-Release-of-paperq-1.2.1.html"/>
    <updated>2014-03-03 23:09</updated>
    <id>http://brandon.invergo.net/news/2014-03-03-Release-of-paperq-1.2.1.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've just released version 1.2.1 of
<a href="http://paperq.invergo.net">paperq</a>.  paperq is a simple command-line
tool for managing a reading queue of academic/scientific papers.</p>

<p>This is a simple bugfix release, preventing unnecessary output when
multiple BibTeX files are scanned from a directory.</p>

<p>paperq 1.2.1 can be downloaded <a href="http://paperq.invergo.net/download">here</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of paperq 1.2]]></title>
    <link href="http://brandon.invergo.net/news/2014-02-23-Release-of-paperq-1.2.html"/>
    <updated>2014-02-23 22:34</updated>
    <id>http://brandon.invergo.net/news/2014-02-23-Release-of-paperq-1.2.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've just released version 1.2 of
<a href="http://paperq.invergo.net">paperq</a>. The biggest change is that I
wrote another program in C, paperbib, that handles the BibTeX parsing
(via <a href="http://www.gerg.ca/software/btOOL/">btparse</a>) and bibliography
formatting. I guess it also might be handy as a standalone
program. Anyway, the result is that paperq should run much faster and
it should be more robust in parsing BibTeX files.</p>

<p>Other changes:</p>

<ul>
<li>Creating a tarball archive is now done via <code>-z</code> rather than <code>-x</code>
because it makes more sense</li>
<li>There is a new option, <code>max-authors</code>, which sets the maximum number
of authors to print before truncating and printing "et al.". Set
this in the config file at <code>.config/paperq/paperq.conf</code>.</li>
<li><a href="http://www.gerg.ca/software/btOOL/">btparse</a> and
<a href="http://www.gnu.org/s/libunistring">libunistring</a> are now
dependencies</li>
</ul>

<p><a href="http://paperq.invergo.net/download/paperq-1.2.tar.gz">Download it now!</a></p>

<p>Enjoy!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[paperq: a tool for managing a reading queue of academic literature]]></title>
    <link href="http://brandon.invergo.net/news/2014-01-26-paperq-a-tool-for-managing-a-reading-queue-of-academic-literature.html"/>
    <updated>2014-01-26 21:29</updated>
    <id>http://brandon.invergo.net/news/2014-01-26-paperq-a-tool-for-managing-a-reading-queue-of-academic-literature.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've finally completely <a href="http://brandon.invergo.net/articles/index.html">rid myself of
Mendeley</a> and so now
I've been building up a workflow to replace its functionality.  I've
been using <a href="http://www.molspaces.com/cb2bib/">cb2bib</a> for metadata
extraction, which works quite well, saving the metadata to a BibTeX
file.  I've also been maintaining a basic, searchable database of
literature with my notes in org-mode for Emacs (adapted from
<a href="https://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/">this setup</a>).</p>

<p>The main thing that I was missing was a way of keeping track of which
papers I still have not read. So, I started with a basic shell script,
called <code>paperq</code>, to maintain a queue of papers: files are added to the
queue and then when you run the script it opens the next paper. Then
it slowly built up from there with new convenient features being
added.  I've been finding it to be really useful so I've packaged it
up in case others might need something like it.</p>

<p><a href="http://paperq.invergo.net">paperq</a> is a command-line tool.  It's
usage is simple: you add files to the queue with the <code>-a</code> option (you
can remove with the <code>-r</code> flag). When you run it without arguments the
next file in the queue is opened. The queue part of the code itself is
rather simple but paperq also offers some other nice features:</p>

<ul>
<li>Display info on a file. Given a BibTeX file, print the bibliographic
information, otherwise print the file location (-i option)</li>
<li>List all files (or bibliographic information) in the queue (-l
option)</li>
<li>Create an archive (tar.gz) of the papers in the queue, prepending
the file names with the queue position (-x option)</li>
<li>Operate on any file in the queue, instead of the head, via the -n
option</li>
<li>Peek at a file (open it, but don't remove it from the queue) via the
-p option</li>
<li>Print a file (-t option)</li>
<li>Configurable file-opening command (xdg-open %s, by default)</li>
</ul>

<p>Documentation is available in the README file or on the website. A man
page is also included.</p>

<p>I've been using it myself now that I finally stopped using Mendeley. I
find it to be quite handy, so I've packaged it up to be shared with
others.</p>

<p>Screenshot showing the bibliographic info:</p>

<p><a href="http://invergo.net/img/paperq.png"><img
src="http://invergo.net/img/paperq-thumb.png"></img></a></p>

<p>You can download version 1.0 from the
<a href="http://paperq.invergo.net/download">website</a>.  For users of Arch
Linux and related distros, it's available in the
<a href="https://aur.archlinux.org/packages/paperq/">AUR</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2014.01.06]]></title>
    <link href="http://brandon.invergo.net/news/2014-01-07-Release-of-GSRC-2014.01.06.html"/>
    <updated>2014-01-07 19:51</updated>
    <id>http://brandon.invergo.net/news/2014-01-07-Release-of-GSRC-2014.01.06.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the 2014.01.06 release of GSRC, the GNU Source
Release Collection. GSRC is a convenient means to fetch, build and
install the latest GNU software from source via a BSD Ports-like system.
Installing a package is as simple as</p>

<p>$ make -C gnu/hello install</p>

<p>You can find more information and the documentation at the GSRC website:
http://www.gnu.org/software/gsrc</p>

<p>This release is a snapshot of the state of released GNU software at this
time. You can download this release at http://ftp.gnu.org/gnu/gsrc or,
you can download it from the nearest mirror at
http://ftpmirror.gnu.org/gsrc/</p>

<p>Of course, to stay up-to-date with the latest package releases
in-between releases of GSRC, you may choose instead to checkout the bzr
repository:</p>

<p>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc</p>

<p>And keep up-to-date with the latest releases:</p>

<p>$ bzr update</p>

<p>If you encounter any problems with a build script, please let me know
at bug-gsrc@gnu.org.</p>

<p>NEWS</p>

<ul>
<li>Changes in GSRC 2014.01.06
<ul>
<li>Changes to the GSRC system
<ul>
<li>Info documentation is now properly managed. Previously, info
documentation for software installed by GSRC was not properly
merged into a "dir" file, making it difficult to browse the
documentation when several packages were installed.  GSRC now
properly merges all the documentation into $prefix/share/info/dir.
In order to view this documentation with your info browser, be
sure to set the INFOPATH environment variable.</li>
<li>Install source code to a live directory.  Using the new
"install-src" Make target, the source code for a package can be
installed to your GSRC system directory (i.e. /gnu or $HOME/gnu)
under the "src" sub-directory.  This makes studying the source
code of GNU software releases even easier.  You can use the
"uninstall-src" to remove it.  Finally, the "install-src-p" target
can test whether the source code has already been installed.</li>
<li>Uninstall old versions of software.  When software is
updated via GSRC, the old version remains installed alongside the
new version, while only the new version is "stowed" and available
to use (see the GSRC documentation for more information).  Running
the "uninstall-pkg" target would only remove the current version
of the package, leaving the old versions in place.  Using the new
"uninstall-pkg-old" and "uninstall-src-old" targets, you can
remove all but the current version of a package.</li>
<li>GSRC now checks for user and group dependencies.  Some
programs require specific users or groups to be present on the
system in order to use them.  GSRC will now check that the
required users/groups are present before installing software.</li>
</ul></li>
<li>Changes in GSRC packages
<ul>
<li>11 packages have been added to GSRC since the last release</li>
<li>70 packages have been updated since the last release</li>
<li>1 build that was previously broken has been fixed</li>
<li>Coverage statistics (Note: the totals include packages that
will not be implemented in GSRC, such as retired packages, which are
counted as completed. Broken builds are counted as incomplete. Some
packages have not yet made any releases, which are also counted as
incomplete. See TODO for more information.)
<ul>
<li>GNU packages [417/468] [87%]</li>
<li>GNOME packages
<ul>
<li>Core [15/116] [12%]</li>
<li>Apps [1/44] [2%]</li>
</ul></li>
<li>GNUstep packages [22/29] [75%]</li>
</ul></li>
<li>New packages (most recent version given)
<ul>
<li>ccd2cue (0.2)</li>
<li>classpathx-activation (1.1.1)</li>
<li>classpathx-comm (20040420)</li>
<li>classpathx-mail (1.1.2)</li>
<li>classpathx-servletapi (3.0)</li>
<li>fisicalab (0.3.3)</li>
<li>gjdoc (0.7.9)</li>
<li>gnu-pw-mgr (1.1)</li>
<li>gnunet-fuse (0.10.0)</li>
<li>gnustandards (2013)</li>
<li>inetlib (1.1.2)</li>
</ul></li>
<li>Updated packages (most recent version given)
<ul>
<li>3dldf (2.0.3)</li>
<li>apl (1.1)</li>
<li>atk (2.10.0)</li>
<li>autoconf-archive (2013.11.01)</li>
<li>autogen (5.18.2)</li>
<li>automake (1.14.1)</li>
<li>binutils (2.24)</li>
<li>bison (3.0.2)</li>
<li>ccaudio (2.1.1)</li>
<li>ccscript (5.0.0)</li>
<li>cgicc (3.2.12)</li>
<li>chess (6.1.1)</li>
<li>classpathx-activation (1.1.2)</li>
<li>complexity (1.1)</li>
<li>coreutils (8.22)</li>
<li>denemo (1.1.0)</li>
<li>freeipmi (1.3.4)</li>
<li>gcc (4.8.2)</li>
<li>gcl (2.6.10)</li>
<li>gcompris (13.11)</li>
<li>gconf (3.2.6)</li>
<li>gdb (7.6.2)</li>
<li>gdbm (1.11)</li>
<li>gdk-pixbuf (2.30.1)</li>
<li>gimp (2.8.8)</li>
<li>glib (2.38.1)</li>
<li>gnubatch (1.10)</li>
<li>gnucash (2.4.14)</li>
<li>gnumach (1.4)</li>
<li>gnunet (0.10.0)</li>
<li>gnunet-gtk (0.10.0)</li>
<li>gnuradio (3.7.2)</li>
<li>gnustep-back (0.24.0)</li>
<li>gnustep-base (1.24.6)</li>
<li>gnustep-gui (0.24.0)</li>
<li>gnustep-make (2.6.6)</li>
<li>gnutls (3.2.8)</li>
<li>gpaint (0.3.3)</li>
<li>grep (2.16)</li>
<li>gretl (1.9.13)</li>
<li>gtk (3.10.2)</li>
<li>hello (2.9)</li>
<li>hyperbole (5.0.5)</li>
<li>icecat (24.0)</li>
<li>kawa (1.14)</li>
<li>libcdio (0.92)</li>
<li>libextractor (1.3)</li>
<li>libgcrypt (1.6.0)</li>
<li>libmicrohttpd (0.9.33)</li>
<li>librejs (5.4.1)</li>
<li>libtasn1 (3.4)</li>
<li>lightning (2.0.2)</li>
<li>lilypond (2.16.2)</li>
<li>linux-libre (3.12)</li>
<li>liquidwar6 (0.2.3551)</li>
<li>make (4.0)</li>
<li>mediagoblin (0.6.0)</li>
<li>mig (1.4)</li>
<li>octave (3.8.0)</li>
<li>parallel (20131222)</li>
<li>performance (0.4.0)</li>
<li>rcs (5.9.2)</li>
<li>recutils (1.6)</li>
<li>serveez (0.2.2)</li>
<li>solfege (3.22.2)</li>
<li>sqlclient (1.7.0)</li>
<li>tar (1.27.1)</li>
<li>tramp (2.2.8)</li>
<li>webservices (0.5.10)</li>
<li>xorriso (1.3.4)</li>
</ul></li>
</ul></li>
</ul></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of zeptodb 2.0.2]]></title>
    <link href="http://brandon.invergo.net/news/2013-11-17-Release-of-zeptodb-2.0.2.html"/>
    <updated>2013-11-17 16:26</updated>
    <id>http://brandon.invergo.net/news/2013-11-17-Release-of-zeptodb-2.0.2.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm pleased to announce the release of
<a href="http://zeptodb.invergo.net">zeptodb</a> 2.0.2.  This is a bugfix
release.  Several memory bugs were fixed and you should now be able to
build the package successfully in Mac OS X.  Also, I am now building
all packages using <a href="http://www.gnu.org/s/swbis">GNU swbis</a> (see below
for more information; I'll probably write separate a post about that
in general too).</p>

<p><em>edit</em>: I just uploaded a minor update to version 2.0.2b.  Only the
 documentation was modified.</p>

<p>You can download zeptodb <a href="http://zeptodb.invergo.net/download">here</a>.</p>

<p>Thanks to swbis, the usual source distribution, zeptodb-2.0.2.tar.gz,
now also contains checksums (md5, sha1 and sha512) as well as a GPG
signature.  You can thus verify the authenticity of the package using
<code>swverify</code> from the swbis package:</p>

<pre><code>$ swverify -d @- &lt;zeptodb-2.0.2.tar.gz
swverify: Archive digest: md5 OK (Good)
swverify: Archive digest: sha1 OK (Good)
swverify: Archive size: OK (Good)
swverify: Archive digest: sha512 OK (Good)
gpg: Signature made Sun 17 Nov 2013 03:16:57 PM CET using RSA key ID EB7AB74D
gpg: Good signature from "Brandon Invergo (GNU) &lt;brandon@gnu.org&gt;"
gpg:                 aka "Brandon Invergo &lt;brandon@invergo.net&gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: E675 19DB 1E30 6FA8 266D  08BA 046E DEE6 EB7A B74D
</code></pre>

<p>In the <code>swbis</code> subdirectory, I also provide two packages that are
compliant with the POSIX packaging standard that swbis implements, one
is a source distribution (zeptodb-2.0.2-src.sw.tar.gz) and the other
is a binary (x86_64 GNU/Linux) distribution
(zeptodb-2.0.2-x86_64.sw.tar.gz).  Both can be installed via the swbis
tool <code>swinstall</code>.  The source distribution is automatically configured
and built after it is installed with <code>swinstall</code>. The built binaries can
then be installed via the <code>swconfig</code> tool:</p>

<pre><code>$ swinstall -s :zeptodb-2.0.2-src.sw.tar.gz @/usr/local
[configure and make build output]
$ swconfig zeptodb @/usr/local
[make install output]
</code></pre>

<p>The x86_64 binary distribution will require up-to-date GNU libc
(2.18) and GDBM (1.10) libraries.  The binaries will be installed in
the proper places at the prefix of your choice when you run
<code>swinstall</code>.  For example, to install to <code>/usr/local</code>:</p>

<pre><code>$ swinstall -s :zeptodb-2.0.2-x86_64.sw.tar.gz @/usr/local
</code></pre>

<p>Why do this?  It's unfeasible for me to provide packages for all the
different packaging systems out there.  If I'm only going to provide
one, it had better be standards-compliant.  It should be relatively
simple to convert the swbis packages to some other format.  OK, so I
may be the only person in the world other than the swbis developer who
is using this system, but it's to be hoped that others will join in.
At the very least, building standard source distributions with swbis
is handy for including in-line all the checksums and signatures right
into the package.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of Pacnanny 1.3]]></title>
    <link href="http://brandon.invergo.net/news/2013-10-20-Release-of-pacnanny-1.3.html"/>
    <updated>2013-10-20 19:26</updated>
    <id>http://brandon.invergo.net/news/2013-10-20-Release-of-pacnanny-1.3.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Today there's a new release of Pacnanny, a wrapper for the pacman
package manager (Arch Linux and derivatives).  Pacnanny enforces good
pacman discipline by, for example, by automatically fetching news
before an update or by summarizing new <code>pacsave</code> and <code>pacnew</code> files at
the end of an update.  This terribly minor release simply updates the
default method of displaying the news, which works by dumping it to
stdout via <code>w3m</code> and then doing a bit of post-processing on it to make
it easier to read and to cut out some unnecessary junk.</p>

<p>If you're interested, you can check it out over at
<a href="http://www.github.com/brandoninvergo/pacnanny">Github</a> (yes, it's one
of my few remaining projects hosted there). It's also available to
install <a href="https://aur.archlinux.org/packages/pacnanny/">from the AUR</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2013.10.06]]></title>
    <link href="http://brandon.invergo.net/news/2013-10-07-Release-of-GSRC-2013.10.06.html"/>
    <updated>2013-10-07 13:56</updated>
    <id>http://brandon.invergo.net/news/2013-10-07-Release-of-GSRC-2013.10.06.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the 2013.10.06 release of GSRC, the GNU Source
Release Collection. GSRC is a convenient means to fetch, build and
install the latest GNU software from source via a BSD Ports-like system.
Installing a package is as simple as</p>

<pre><code>$ make -C gnu/hello install
</code></pre>

<p>You can find more information and the documentation at the GSRC website:
<a href="http://www.gnu.org/software/gsrc">http://www.gnu.org/software/gsrc</a></p>

<p>This release is a snapshot of the state of released GNU software at
this time. You can download this release at
<a href="http://ftp.gnu.org/gnu/gsrc">http://ftp.gnu.org/gnu/gsrc</a> or, you can
download it from the nearest mirror at
<a href="http://ftpmirror.gnu.org/gsrc/">http://ftpmirror.gnu.org/gsrc/</a></p>

<p>Of course, to stay up-to-date with the latest package releases
in-between releases of GSRC, you may choose instead to checkout the bzr
repository:</p>

<pre><code>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc
</code></pre>

<p>And keep up-to-date with the latest releases:</p>

<pre><code>$ bzr update
</code></pre>

<p>If you encounter any problems with a build script, please let me know
at <a href="mailto:bug-gsrc@gnu.org">bug-gsrc@gnu.org</a>.</p>

<p>NEWS</p>

<p>Changes in GSRC 2013.10.06</p>

<p>Changes in GSRC packages</p>

<ul>
<li>2 packages have been added to GSRC since the last release.</li>
<li>59 packages have been updated since the last release</li>
<li>1 build that was previously broken has been fixed</li>
</ul>

<p>Coverage statistics
Note: the totals include packages that will not be implemented in
GSRC, such as retired packages, which are counted as completed. Broken
builds are counted as incomplete. Some packages have not yet made any
releases, which are also counted as incomplete. See TODO for more
information and for a complete list of packages. </p>

<ul>
<li>GNU packages [401/458] [87%] (+1%)</li>
<li>GNOME packages [25/566] [4%] (+0%)</li>
<li>GNUstep packages [22/27] [81%] (+1%)</li>
</ul>

<p>New packages
(most recent version given)</p>

<ul>
<li>apl (1.0)</li>
<li>gnustep-libobjc2 (1.7.2)</li>
</ul>

<p>Updated packages
(most recent version given)</p>

<ul>
<li>alive (2.0.2)</li>
<li>aris (2.1.1)</li>
<li>autogen (5.18.1)</li>
<li>bison (3.0)</li>
<li>bpel2owfn (2.4)</li>
<li>bzr (2.6.0)</li>
<li>ccaudio (2.1.0)</li>
<li>combine (0.4.0)</li>
<li>ddrescue (1.17)</li>
<li>denemo (1.0.8)</li>
<li>freeipmi (1.3.2)</li>
<li>gama (1.14)</li>
<li>gcl (2.6.9)</li>
<li>gdb (7.6.1)</li>
<li>gettext (0.18.3.1)</li>
<li>global (6.2.9)</li>
<li>glpk (4.52.1)</li>
<li>gmp (5.1.3)</li>
<li>gnubatch (1.9)</li>
<li>gnubg (1.02.000)</li>
<li>gnupg (2.0.22)</li>
<li>gnutls (3.2.4)</li>
<li>gsl (1.16)</li>
<li>guile-sdl (0.5.1)</li>
<li>gvpe (2.25)</li>
<li>help2man (1.43.3)</li>
<li>jacal (1c3)</li>
<li>libc (2.18)</li>
<li>libextractor (1.1)</li>
<li>libgcrypt (1.5.3)</li>
<li>libgpg-error (1.11)</li>
<li>libidn (1.28)</li>
<li>libmatheval (1.1.11)</li>
<li>libmicrohttpd (0.9.30)</li>
<li>librejs (5.4)</li>
<li>lightning (2.0.1)</li>
<li>linux-libre (3.11)</li>
<li>m4 (1.4.17)</li>
<li>mediagoblin (0.4.1)</li>
<li>ocrad (0.22)</li>
<li>parallel (20130922)</li>
<li>pspp (0.8.1)</li>
<li>pycdio (0.20)</li>
<li>r (3.0.1)</li>
<li>rcs (5.9.1)</li>
<li>remotecontrol (1.1)</li>
<li>scm (5f1)</li>
<li>sipwitch (1.8.6)</li>
<li>slib (3b4)</li>
<li>solfege (3.22.1)</li>
<li>texinfo (5.2)</li>
<li>texmacs (1.0.7.20)</li>
<li>ucommon (6.0.7)</li>
<li>units (2.02)</li>
<li>unrtf (0.21.5)</li>
<li>wb (2b2)</li>
<li>xboard (4.7.2)</li>
<li>xorriso (1.3.2)</li>
<li>zrtp (2.3.4)</li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of pyconfigure 0.2.1]]></title>
    <link href="http://brandon.invergo.net/news/2013-09-07-Release-of-pyconfigure-0.2.1.html"/>
    <updated>2013-09-07 11:47</updated>
    <id>http://brandon.invergo.net/news/2013-09-07-Release-of-pyconfigure-0.2.1.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm neck-deep in writing my thesis, so I completely forgot to write
about this, but a couple weeks ago I released a bugfix version of
<a href="http://www.gnu.org/s/pyconfigure">GNU pyconfigure</a>, version
0.2.1. pyconfigure consists of templates for
<a href="http://www.gnu.org/s/autoconf">Autoconf</a> and
<a href="http://www.gnu.org/s/make">Make</a> for simplifying the process of
packaging Python programs in a GNU standards-compliant manner. You can
read the full release announcement
<a href="https://savannah.gnu.org/forum/forum.php?forum_id=7688">on Savannah</a>.</p>

<p>The day after I made the release, I gave a presentation on pyconfigure
at the <a href="http://www.gnu.org/ghm">GNU Hackers Meeting</a> in Paris. A video
recording of my talk has been
<a href="http://audio-video.gnu.org/video/ghm2013/Brandon_Invergo-Python_packaging_the_GNU_way_with_pyconfigure_.webm">made available</a>. There
were some very interesting talks at the meeting so I recommend
checking out
<a href="http://audio-video.gnu.org/video/ghm2013/">some of the other videos</a>!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2013.07.06]]></title>
    <link href="http://brandon.invergo.net/news/2013-07-15-Release-of-GSRC-2013.07.06.html"/>
    <updated>2013-07-15 00:03</updated>
    <id>http://brandon.invergo.net/news/2013-07-15-Release-of-GSRC-2013.07.06.html</id>
    <content type="html"><![CDATA[<p></p>

<p>It's time for my ceremonial late announcement of a GSRC release on my
own website.</p>

<p>I'm happy to announce the 2013.07.06 release of GSRC, the GNU Source
Release Collection. GSRC is a convenient means to fetch, build and
install the latest GNU software from source via a BSD Ports-like system.
Installing a package is as simple as</p>

<pre><code>$ make -C gnu/hello install
</code></pre>

<p>You can find more information and the documentation at the GSRC website:
<a href="http://www.gnu.org/software/gsrc">http://www.gnu.org/software/gsrc</a></p>

<p>This release is a snapshot of the state of released GNU software at
this time. You can download this release at
<a href="http://ftp.gnu.org/gnu/gsrc">http://ftp.gnu.org/gnu/gsrc</a> or, to
download it from the nearest mirror, at
<a href="http://ftpmirror.gnu.org/gsrc/">http://ftpmirror.gnu.org/gsrc/</a></p>

<p>Of course, to stay up-to-date with the latest package releases
in-between releases of GSRC, you may choose instead to checkout the bzr
repository:</p>

<pre><code>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc
</code></pre>

<p>And keep up-to-date with the latest releases:</p>

<pre><code>$ bzr update
</code></pre>

<p>If you encounter any problems with a build script, please let me know
at bug-gsrc@gnu.org.</p>

<p>NEWS</p>

<ul>
<li><p>Changes in GSRC packages</p>

<ul>
<li>6 packages have been added to GSRC since the last release.</li>
<li>60 packages have been updated since the last release.</li>
</ul></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[A quick introduction to version control with Fossil]]></title>
    <link href="http://brandon.invergo.net/news/2013-07-11-A-quick-introduction-to-version-control-with-Fossil.html"/>
    <updated>2013-07-11 00:02</updated>
    <id>http://brandon.invergo.net/news/2013-07-11-A-quick-introduction-to-version-control-with-Fossil.html</id>
    <content type="html"><![CDATA[<p></p>

<p>As I
<a href="2013-06-16-Setting-up-Fossil-repository-hosting.html">previously indicated</a>,
I have recently moved all of my programming projects (and a couple
non-programming projects) to self-hosted
<a href="http://www.fossil-scm.org">Fossil</a> repositories.  I have previously
used mainly <a href="http://git-scm.com/">Git</a> for my projects, due to my
usage of <a href="http://www.github.com">Github</a> and
<a href="http://www.gitorious.org">Gitorious</a> for project hosting, with the
exception of <a href="http://www.gnu.org/s/gsrc">GSRC</a>, which uses
<a href="http://bazaar.canonical.com">Bazaar</a>, the recommended version control
system of the GNU project.  I've also have had experience with
<a href="http://mercurial.selenic.com/">Mercurial</a>,
<a href="http://subversion.apache.org">Subversion</a> and
<a href="http://www.nongnu.org/cvs/">CVS</a>, so I have at least some idea of how
many version control systems work.</p>

<p>Since almost every project I work on consists of one sole developer,
all of these disparate systems largely converge into similar
workflows.  I primarily switched over to Fossil for the easy
self-hosting and integrated wiki and bug-tracking tools, but I quickly
found myself at home working with it.  Nevertheless, since there are
some aspects of it that differ from other VCS's, I thought I would
give an introduction to it.  This may be especially useful as a quick
primer for people coming from Git, which is perhaps the most different
from Fossil.</p>

<p>Since this is just an introduction, I will only cover the information
needed to get up and running into a normal, everyday workflow.  As
such, I will not cover any of the special, corner cases or extra
options.  In all cases, do check the built in help for each command
since many take optional arguments that I will not explain here
(<code>fossil help [command]</code>).</p>

<h2>The fossil command</h2>

<p>Like most systems, Fossil consists of a single command, <code>fossil</code>.
Unlike most systems, that single command encompasses a wide range of
functionality, from basic version control tasks to running a basic web
server.  Nevertheless, its usage will quickly be familiar to you.</p>

<h2>Setting up a repository</h2>

<h3>Creating a new repository</h3>

<p>The first thing that we will want to do is to create a repository.  As
one might expect, this is done via the <code>fossil new</code> command.  However
there's a twist: you must specify the name of the repository.</p>

<pre><code>$ fossil new foo.fossil
</code></pre>

<p>Now hang on.  This has just created a file and it's not even a hidden
one.  Clutter!, you scream.  It's true: Fossil repositories consist of
a single file, which is, in fact, an <a href="https://sqlite.org/">SQLite</a>
database (the developer of Fossil created SQLite as well).  In the
beginning, I was not sure what to do with this file; I disliked having
it sitting among my source files.  The recommendation that I've seen
and that I would pass on is to instead keep a directory somewhere that
contains all of your <code>.fossil</code> files.  This directory then, for
example, allows the easy back-up of all of your repositories.</p>

<p>So let's now assume that we will create all Fossil repositories in the
<code>~/fossils</code> directory:</p>

<pre><code>$ fossil new ~/fossils/foo.fossil
project-id: c17896e4840ecb6d93bb8081f56430a2be8374fe
server-id:  39264b251712a44f63ba756e1b190f44ad6e5885
admin-user: brandon (initial password is "13b63a")
</code></pre>

<p>Notice that when the repository is created, a user (with your name) is
automatically created and is assigned a password.</p>

<h3>Cloning an existing repository</h3>

<p>If you wish to clone a repository that already exists, you will not be
surprised to learn that you use the <code>fossil clone</code> command.  As with
<code>fossil new</code>, you must specify the name of your repository:</p>

<pre><code>$ fossil clone http://zeptodb.invergo.net ~/fossils/zeptodb.fossil
Round-trips: 2   Artifacts sent: 0  received: 510
Clone finished with 477 bytes sent, 869785 bytes received
Rebuilding repository meta-data...
  100.0% complete...
project-id: 6a2f6abb93a52fa338a6ae020dc33342574c989e
server-id:  26274af3664a8d191d511c505a18f997d54bc169
admin-user: brandon (password is "c3a421")
</code></pre>

<p>If you already have a username and password on the remote repository,
you may introduce it in the URL:</p>

<pre><code>$ fossil clone http://user:pass@zeptodb.invergo.net ~/fossils/zeptodb.fossil
</code></pre>

<h3>Opening the repository</h3>

<p>This is a step that is, as far as I am aware, unique to Fossil.  Now
that you have a repository on your system, you need to open it
somewhere.  Essentially, you are checking out the contents of the
repository in a separate directory.  So, first create a directory to
contain the project (I keep my projects in <code>~/Projects</code>):</p>

<pre><code>$ mkdir -p Projects/foo
</code></pre>

<p>Due to the way Fossil handles branches, which is more akin to systems
like SVN, I also go ahead and create a <code>trunk</code> directory to hold the
code.  So, let's do that, and then open the repository in there with
<code>fossil open</code>:</p>

<pre><code>$ mkdir Projects/foo/trunk
$ cd Projects/foo/trunk
$ fossil open ~/fossils/foo.fossil
</code></pre>

<p>The result is a directory under version control that is much closer to
what you are used to with other systems.  The difference is that it is
linked to a local repository database elsewhere on the system.  You
can actually use <code>fossil close</code> to close the connection to the
database.  This does not clear out the directory; all the files will
remain there.  It will simply no longer be under version control.  I
have not found the occasion to require this.</p>

<h3>Configuring a repository</h3>

<p>As I mentioned above, the <code>fossil</code> command even offers basic web
server functionality.  In fact, this is the most convenient way to
configure your repository.  Simply run:</p>

<pre><code>$ fossil ui
</code></pre>

<p>This will launch the web server and it will open a local web page for
your repository.  Feel free to explore.  For now, we're just
interested in the <code>Admin</code> section.  First things first: go to the
<code>Users</code> section, then click on your User ID and finally change your
password.  Next, you'll want to go to the <code>Configuration</code> section to
set some basic information like your project name and description.
The <code>Settings</code> section might also have some areas of interest if you
have special needs regarding command configuration; for me the
defaults are normally fine.</p>

<p>Fossil repositories are highly configurable and it is beyond the scope
of this tutorial to go into any detail.  I find that the defaults are
generally sane.  Have a look around the settings and read the
documentation for more information.</p>

<p>Note that you may also set many settings with the <code>fossil settings</code>
command.</p>

<h2>Working with files</h2>

<h3>Adding new files</h3>

<p>Adding new files to the repository is simple: just use the <code>fossil
add</code> command, which behaves exactly like any other system:</p>

<pre><code>$ fossil add bar.c
ADDED  bar.c
</code></pre>

<h3>(Re)moving files</h3>

<p>Moving or removing files works a bit differently than you might
expect.  Either one of these commands simply changes the references in
the database, however they <em>do not</em> modify the actual file system.
This means that you need to follow up the fossil commands with another
command to do the actual action.</p>

<pre><code>$ fossil mv bar.c baz.c
$ ls
bar.c
$ mv bar.c baz.c
$ fossil rm baz.c
$ ls
baz.c
$ rm baz.c
</code></pre>

<h3>Checking the current status</h3>

<p>Once you've added some files or made some changes, you'll want to see
what the current status in the repository is.  This is accomplished
with the <code>fossil changes</code> command:</p>

<pre><code>$ touch foo.c bar.c baz.c
$ fossil add *.c
$ fossil changes
ADDED      bar.c
ADDED      baz.c
ADDED      foo.c
</code></pre>

<h3>Viewing changes</h3>

<p>You may view the changes on a file using either the <code>fossil diff</code> or
the <code>fossil gdiff</code> commands.  The former uses an internal diff
mechanism, while the other allows you to select a graphical diff
application (set up in the Settings section of the web interface or
via the <code>fossil settings</code> command).  Normally, this compares a file
against its last checked-in version, however you may select other
versions using the <code>--from</code> and <code>--to</code> arguments.</p>

<h3>Committing changes</h3>

<p>Now that you're done making changes, you want to commit them.  This is
done with <code>fossil commit</code>, which works much the same as in other
systems:</p>

<pre><code>$ fossil commit -m 'first commit'
</code></pre>

<p>You can, of course, only commit a limited sub-set of changed files if
you would like:</p>

<pre><code>$ fossil commit -m 'first commit' foo.c
</code></pre>

<p>If you are working from a clone of a remote repository, and you have
sufficient access rights on that repository, Fossil will by default
behave in a similar manner to CVS by auto-syncing your changes with
the remote server.  Thus, you commits will automatically be pushed to
the remote server.  This may be turned off in the settings.</p>

<h3>Reviewing commits</h3>

<p>You can look at a log of past commits using the <code>fossil timeline</code>
command:</p>

<pre><code>$ fossil timeline
22:22:16 [dd33da8b57] *CURRENT* first commit (user: brandon tags: trunk)
22:05:09 [9ec5208d2a] initial empty check-in (user: brandon tags: trunk)
</code></pre>

<h2>Syncing your repository</h2>

<p>Fossil supports the usual <code>push</code> and <code>pull</code> operations for
synchronizing your local repository with the remote upstream repo.
Additionally, there is the handy <code>sync</code> command, which is
equivalent to running both a <code>push</code> and a <code>pull</code> at the same time.</p>

<h2>Check-ins</h2>

<p>(note: in Fossil, one primarily refers to "check-ins", where in other
systems one might talk about "revisions" or "commits")</p>

<p>As with Git, Fossil check-ins are referred to by an SHA1 hash.  For
commands that require the specification of a particular check-in, you
may refer to one by the first four or more characters of the hash.</p>

<h3>Tags</h3>

<p>You can add a tag to a check-in using the <code>tag</code> command.  Note that,
unlike in Git, you must explicitly specify the check-in by its hash.
So to add a tag called "v1.0":</p>

<pre><code>$ fossil tag add v1.0 9ec520
</code></pre>

<p>You can then use that tag name in place of the hash of the check-in.</p>

<p>You can view a list of all existing tags via the <code>tag list</code> command.</p>

<pre><code>$ fossil tag list
v1.0
</code></pre>

<p>Finally, you can easily remove a tag from a check-in with <code>tag
cancel</code>:</p>

<pre><code>$ fossil tag cancel v1.0 9ec520
</code></pre>

<p>Some tags (actually, more precisely, "properties") are automatic.  For
example, the most recent check-in carries the tag "tip".</p>

<h2>Branches and Forks</h2>

<p>Here we need to be a bit more careful due to some differences in
terminology between Fossil and other version control systems.  In
Fossil, forking in particular takes on a different meaning.
Effectively, on a technical level, forking and branching are the same:
they both result in multiple "leaf" commits, or, in other words,
multiple parallel tips.  The difference is in the intent.  Branches
are desirable and represent parallel development, such as on large new
features that are not ready to be merged into the trunk yet.  Forks on
the other hand, arise when multiple developers are working on the same
code base but have not merged their work yet.</p>

<h3>Creating a branch</h3>

<p>Branches are created with the <code>branch new</code> command.  Note that you
must specify a check-in as its basis:</p>

<pre><code>$ fossil branch new experimental tip
</code></pre>

<p>This will create a new branch called "experimental" based on the
current tip.</p>

<p>For Git users, the next step will be unfamiliar.  In Git, branching
is, as they say, cheap.  You can create and switch between branches
quickly and easily.  In Fossil, you use a workflow more similar to
that of, for example, Subversion, in which you keep your branches in
separate directories:</p>

<pre><code>$ cd ..
$ mkdir -p branches/experimental
$ cd branches/experimental
$ fossil open ~/fossils/foo.fossil
$ fossil checkout experimental
</code></pre>

<p>You may then proceed to edit files and commit; all check-ins will be
added to the newly created "experimental" branch.</p>

<h3>Merging</h3>

<p>Merging a branch back into trunk is simple:</p>

<pre><code>$ cd ../../trunk
$ fossil merge experimental
</code></pre>

<p>If the current branch has a fork, you can simply call the <code>merge</code>
command without specifying a version.  This will attempt to resolve
the fork and merge the disparate tips.</p>

<h2>Web interface</h2>

<p>I will only briefly introduce some key features of the web interface.
These features are also accessible from the command line, however it
is far more convenient to use the web interface to interact with
them.</p>

<h3>Wiki</h3>

<p>Your Fossil repository contains a built-in wiki that keeps all pages
under version control.  To create a new wiki page, simply go to the
Wiki section of the page and click on "Create a new wiki page".  The
wiki syntax is mainly a reduced set of HTML, with some extra
simplified formatting markup for common tasks.</p>

<p>For example, paragraphs are simply separated by line breaks.  Lists
are created by putting a '*' (unordered) or '#' (ordered) character at
the start of the line, surrounded by two spaces on either side:</p>

<pre><code>This is a list:
  *  item
  *  item
</code></pre>

<p>You can create hyperlinks using square brackets.  Using this, you can
link to other wiki pages by name:</p>

<pre><code>[foo|Link to the Foo wiki page]
[foo]
[http://brandon.invergo.net|Brandon's Page]
</code></pre>

<p>You can use the <code>&lt;nowiki&gt;</code> tag to turn off wiki formatting for a block
of text.  Furthermore, the <code>&lt;verbatim&gt;</code> tag works like a combination
of the HTML tag <code>&lt;pre&gt;</code> and the <code>&lt;nowiki&gt;</code> tag, for producing
pre-formatted text.</p>

<p>When you create a new repository, you should at least edit the wiki
home page.  This is a special page that is accessed via the "[project]
wiki home page" link on the Wiki page.  This allows you to edit the
landing page that people see when they first visit your repository.</p>

<p>There is also another special type of wiki page called an Event.
These wiki pages show up in the Timeline and can be used as a
version-controlled project blog, for example to announce releases.  In
addition to adding textual information, you can add tags to the event
and give it a special background color to make it stand out in the
timeline.</p>

<h3>Tickets</h3>

<p>Fossil contains a built-in bug tracking system, which is found under
the Tickets section of the web interface.  There you will find a link
to create a new ticket or to get a list of all tickets.  The bug
tracker's basic functionality should be familiar to anyone who's used
such a system in the past so I will not go into detail.</p>

<p>Note that you can refer to check-ins in a bug report (and <em>vice
versa</em>) by specifying the check-in/bug number in brackets
(i.e. <code>[9EC520]</code>).</p>

<h3>Documentation</h3>

<p>Fossil has a feature to allow any documentation files contained under
version control to be viewed from the web interface.  Simply point
your browser to <code>&lt;webpage_root&gt;/doc/&lt;check-in&gt;/&lt;page&gt;</code>.  You can
specify any check-in, allowing you to see the documentation as it was
at different points in time.  If the file is contained in a
sub-directory of the repository, include it in the URL after the
check-in ID (<code>&lt;webpage_root&gt;/doc/&lt;check-in&gt;/&lt;sub-directory&gt;/&lt;page&gt;</code>)</p>

<h2>Summary</h2>

<p>As you can see, many of the familiar commands from other version
control systems are available.  In fact you could probably get up and
running with Fossil rather quickly on your own.  Nevertheless,
hopefully this brief introduction will be useful to you as you become
more comfortable with Fossil.</p>

<h2>Further reading</h2>

<p>I highly recommend reading through the documentation on the
<a href="http://fossil-scm.org/index.html/doc/trunk/www/permutedindex.wiki">Fossil website</a>.
In particular, I recommend reading the detailed explanation of the
<a href="http://fossil-scm.org/index.html/doc/trunk/www/concepts.wiki">concepts behind the system</a>.
I also suggest reading the section on
<a href="http://fossil-scm.org/index.html/doc/trunk/www/branching.wiki">Branching, Forking, Merging and Tagging</a>
for a more in-depth discussion on the topic.</p>

<p>Finally, a
<a href="http://www.fossil-scm.org/schimpf-book/home
">full-length book on Fossil</a> is freely available and gives a nice introduction to the workflow
and a more in-depth overview of the web interface.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of zeptodb 2.0.1]]></title>
    <link href="http://brandon.invergo.net/news/2013-07-04-Release-of-zeptodb-2.0.1.html"/>
    <updated>2013-07-04 23:57</updated>
    <id>http://brandon.invergo.net/news/2013-07-04-Release-of-zeptodb-2.0.1.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Hot on the heels of yesterday's release of
<a href="http://zeptodb.invergo.net">zeptodb</a> 2.0 comes version 2.0.1. There's
nothing exciting to report. This is simply a bugfix release that fixes
a couple of bugs that came to light when running on a very out-dated
GNU/Linux system. Ancient machine aside, they were bugs nevertheless,
so they needed to be fixed.</p>

<p>You can
<a href="http://zeptodb.invergo.net/download/zeptodb-2.0.1.tar.gz">download the source code</a>
or, if you run Arch Linux or one of its derivatives, you can install
it from the <a href="https://aur.archlinux.org/packages/zeptodb/">AUR</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of zeptodb 2.0]]></title>
    <link href="http://brandon.invergo.net/news/2013-07-03-Release-of-zeptodb-2.0.html"/>
    <updated>2013-07-03 11:59</updated>
    <id>http://brandon.invergo.net/news/2013-07-03-Release-of-zeptodb-2.0.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the release of
<a href="http://zeptodb.invergo.net">zeptodb</a> 2.0.</p>

<p>zeptodb is a small collection of relatively tiny tools for interacting
with flat (non-relational) databases.  In fact, they are merely
minimal command-line tools implementing the functionality of a DBM
library.  Thus, the databases they manipulate are simple, key-value
hash tables.</p>

<p>These tools may be helpful in scripts, for example, when persistant
data storage is needed but when a full database would be overkill.
They may also be useful if, for whatever reason, one would like to
manipulate, via the command-line or scripts, DBM databases created by
other programs.</p>

<p>New in this release:</p>

<ul>
<li>Kyoto Cabinet back-end is now available.
<ul>
<li>At compile time, you can now opt to use the
<a href="http://fallabs.com/kyotocabinet/">Kyoto Cabinet DBM</a> library instead
of the <a href="http://www.gnu.org/s/gdbm">GDBM</a> library.  Note that any
databases created with the GDBM library will <em>not</em> be accessible with
the Kyoto Cabinet library.</li>
</ul></li>
<li>Database creation now has a dedicated program
<ul>
<li>Previously, zeptodb databases were created automatically upon storing
the first value in them.  Now, there is the zdbc tool dedicated to
creating new databases.  This tool allows you to control some
parameters of the database, namely the number of hash buckets and the
size of the memory-mapped region that it uses.  As a result, zdbs will
no longer automatically create new databases.</li>
</ul></li>
<li>New <code>--verbose</code> mode
<ul>
<li>All tools now have a <code>--verbose</code> option, which causes them to display
more information while they work.  This is particularly handy when
you are working with thousands of entries.</li>
</ul></li>
<li>General code refactoring
<ul>
<li>To cleanly handle the two DBM back-ends, the code was significantly
refactored, making it easier to read and edit.</li>
</ul></li>
</ul>

<p>You can download the release from the
<a href="http://zeptodb.invergo.net/download">zeptodb website</a>. If you use
Arch Linux or one of its derivatives, you'll find zeptodb in the
<a href="https://aur.archlinux.org/packages/zeptodb/">AUR</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Setting up Fossil repository hosting]]></title>
    <link href="http://brandon.invergo.net/news/2013-06-16-Setting-up-Fossil-repository-hosting.html"/>
    <updated>2013-06-16 13:23</updated>
    <id>http://brandon.invergo.net/news/2013-06-16-Setting-up-Fossil-repository-hosting.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Following up from a <a href="
2012-02-27-moving-my-coding-over-to-gitorious.html">previous news item</a>, and continuing in
my effort to reduce my dependency on external web services, I have
once again moved my code. I had previously (mostly) switched from
<a href="http://www.github.com">Github</a> to
<a href="http://www.gitorious.org">Gitorious</a>. The reasoning was that
Gitorious offered better project organization and also that it was
based on free software. Ultimately, I didn't use the organization very
much like I had originally intended. Furthermore, Gitorious lacked
other features that I wanted, such as a bug tracker.</p>

<p>So, I've made yet another change. Now, all of my code is hosted here
at <a href="https://repos.invergo.net">repos.invergo.net</a> (note that the site
uses a self-signed certificate, so your browser will give you a
warning that you can safely ignore (if you trust me); just add a
security exception in your browser as instructed) using
<a href="http://www.fossil-scm.org">Fossil</a>. Fossil offered several advantages
in my mind. It consists of just a single, statically linked binary,
meaning there's just one thing to download there's nothing to properly
install. The binary includes a web server, a wiki, and a bug-tracker,
in addition to the usual version control system.</p>

<p>With Fossil, I was able to simply put the binary in my <code>PATH</code> on my
shared web server, without having to do any complicated install
process. I put all of my repositories (<code>.fossil</code> files) in a single
directory on my server. I then set up a
<a href="http://fossil-scm.org/index.html/doc/trunk/www/server.wiki">simple, two-line CGI script</a>,
to serve all of the repos:</p>

<pre><code>#!/path/to/fossil
directory: /path/to/fossil-repos/
notfound: http://repos.invergo.net/index.html
</code></pre>

<p>The last line serves up a default page if a non-existant repository is
specified. In this case, I serve up an index of the existing repos.</p>

<p>So, now the <code>grotesque.fossil</code> repository is automatically served from
<a href="https://repos.invergo.net/grotesque">https://repos.invergo.net/grotesque</a>
with no further effort on my part, aside from a bit of .htaccess work:</p>

<pre><code>&lt;Files fossil&gt;
       SetHandler cgi-script
&lt;/Files&gt;
&lt;IfModule mod_rewrite.c&gt;
    RewriteEngine on
    RewriteBase /
    RewriteCond %{REQUEST_URI} !^/fossil/
    RewriteCond %{REQUEST_URI} !^/index.html
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{HTTP_HOST} ^(www\.)?repos.invergo\.

    RewriteRule ^(.*)$ https://repos.invergo.net/fossil/ [L]
&lt;/IfModule&gt;
</code></pre>

<p>This rule also makes sure that any visit is automatically rewritten
to use HTTPS. Since one can log into these repos, and since I have to
send login information when I'm syncing with the repo from my local
copy, I set up access via SSL. That way the login information is encrypted.</p>

<p>What's nice is that, once a project reaches some amount of maturity
and I want to give it its own subdomain, such as Grotesque at
<a href="http://grotesque.invergo.net">http://grotesque.invergo.net</a>, I can
serve it up from the same Fossil repository. So, that subdomain has
its own CGI script that is just serving from the Grotesque
repository. Unfortunately, my SSL certificate only covers the
<a href="https://repos.invergo.net">https://repos.invergo.net</a> subdomain, so
access to the main Grotesque site is not secure.</p>

<p>As mentioned previously, each repository has a built-in wiki and bug
tracker, which is great. They look a bit "bare-boned" but they are
certainly functional. Anonymous login is provided, meaning that the
user does not need an account just to file a bug report. When you have
a personal, local clone of the repository, it includes the wiki and
the bug tracker. Thus, both of these features are also under version
control (though in a slightly different manner from the code that you
check in; they have to commit versions, for example). You can do all
the usual stuff, such as automatically referring to commits in bug
reports and <em>vice versa</em>.</p>

<p>It also can't be stressed enough that it is nice to get away from the
unnecessary complication of git. I'm sure that it comes in handy for
big projects but, let's be honest, the vast majority of free software
projects never grow beyond a couple of developers, for which git is
complete overkill. Not to mention, if you're interested in hosting
your own repositories, it's not so simple to set up git, particularly
on a shared web server. That said, the one feature of git that I miss
is the cheap branching. In Fossil, one works with branches in the more
traditional way of creating the branch and then checking out that
branch in another directory.</p>

<p>To anyone who is working on software projects who is interested in
hosting their own repositories, I cannot give Fossil a higher
recommendation. It gives you a nicely integrated set of tools for
maintaining your software projects. It's easier to get up and running
than git (or hg or bzr) and separate wiki and bug-tracking tools or a
full service like Gitorious, particularly on shared servers where you
don't have root access. Unlike using 3rd-party services like Github,
Gitorious or Bitbucket, you are in control of your own
repositories. And of course, unlike Github and Bitbucket, it's
<a href="https://gnu.org/philosophy/free-sw.html">free software</a>.</p>

<p><a rel="license"
href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img
alt="Creative Commons License" style="border-width:0"
src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br
/><span xmlns:dct="http://purl.org/dc/terms/"
property="dct:title">Setting up Fossil repository hosting</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://brandon.invergo.net" property="cc:attributionName" rel="cc:attributionURL">Brandon Invergo</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of zeptodb 1.1]]></title>
    <link href="http://brandon.invergo.net/news/2013-06-11-Release-of-zeptodb-1.1.html"/>
    <updated>2013-06-11 00:25</updated>
    <id>http://brandon.invergo.net/news/2013-06-11-Release-of-zeptodb-1.1.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the release of zeptodb version 1.1. This release
does not add much in the way of functionality but, instead, it pulls
in some <a href="http://www.gnu.org/s/gnulib">gnulib</a> modules to help make the
code more portable. I used some handy functions provided by the
<a href="http://www.gnu.org/s/libc">GNU C Library</a> that may not be present on
other systems. The gnulib modules provide the functionality for those
systems. For anyone who has GNU libc, you won't notice any change
(aside from a slightly longer <code>configure</code> script).</p>

<p>Head over to the <a href="http://zeptodb.invergo.net">zeptodb website</a> to
download it! </p>

<p>Also, just to demonstrate the usefulness of zeptodb, I ran a quick
test demonstrating the O(1) look-up of the GDBM library on which
zeptodb is based. I had two databases filled with pairs of human genes
and their genetic locations. One database had 5 genes, the other had
62192 genes:</p>

<pre><code>$ zdbf --all gene_locations.db | wc -l
5

$ time echo "ENSG00000141194" | zdbf gene_locations.db
17:63133549-63223821:1

real    0m0.002s
user    0m0.000s
sys     0m0.000s

$ zdbf --all all_genes.db | wc -l
62192

$ time echo "ENSG00000141194" | zdbf all_genes.db 
17:56232494-56233517:1

real    0m0.002s
user    0m0.000s
sys     0m0.000s
</code></pre>

<p>As you can see, even with tens of thousands of records, the correct
record was fetched in the same amount of time. In the middle of a
pipeline that is passing around huge amounts of data, these time
savings can really add up!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of Pacnanny 1.2]]></title>
    <link href="http://brandon.invergo.net/news/2013-06-07-Release-of-pacnanny-1.2.html"/>
    <updated>2013-06-07 23:33</updated>
    <id>http://brandon.invergo.net/news/2013-06-07-Release-of-pacnanny-1.2.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm a bit late in announcing this here. The other day I released a new
version of Pacnanny. This version makes a few minor changes and adds
two new features:</p>

<ul>
<li>Use <code>curl</code> instead of <code>wget</code>, since <code>curl</code> is already a dependency
of Pacman.</li>
<li>Improve the method of specifying the browser to use (i.e. now you
can do stuff like "lynx -dump %s | less".</li>
<li>Change the default news display to just dumping to standard out (via
w3m).</li>
<li>Add the <code>--history</code> option to show the installation history of a
package or packages.</li>
<li>Add the <code>--log</code> option to show the Pacman logs from a given date or
range of dates.</li>
</ul>

<p>The <code>--history</code> option gives output like this:</p>

<pre><code>$ pacnanny --history vim emacs
:: Package history for vim:
2012-06-19 21:21: installed (7.3.547-1)
2012-07-22 11:05: upgraded (7.3.547-1 -&gt; 7.3.600-1)
2012-09-07 09:56: upgraded (7.3.600-1 -&gt; 7.3.659-1)
2012-09-19 00:19: upgraded (7.3.659-1 -&gt; 7.3.661-1)
2012-10-22 22:54: upgraded (7.3.661-1 -&gt; 7.3.709-1)
2012-10-24 20:36: upgraded (7.3.709-1 -&gt; 7.3.712-1)
2012-12-06 19:36: removed (7.3.712-1)
:: Package history for emacs:
2012-06-19 21:22: installed (24.1-2)
2012-08-29 18:41: upgraded (24.1-2 -&gt; 24.2-1)
2012-10-28 23:30: upgraded (24.2-1 -&gt; 24.2-2)
2012-11-18 23:03: upgraded (24.2-2 -&gt; 24.2-3)
2013-01-23 21:32: upgraded (24.2-3 -&gt; 24.2-4)
2013-03-23 13:00: upgraded (24.2-4 -&gt; 24.3-1)
2013-03-25 22:00: upgraded (24.3-1 -&gt; 24.3-1)
2013-03-25 22:14: upgraded (24.3-1 -&gt; 24.3-1)
2013-03-25 22:53: upgraded (24.3-1 -&gt; 24.3-1)
2013-03-25 22:53: upgraded (24.3-1 -&gt; 24.3-1)
2013-05-14 21:32: upgraded (24.3-1 -&gt; 24.3-2)
</code></pre>

<p>As for the <code>--log</code> option, you can pass any kind of date that is
recognizable by the <code>date</code> command. This means you can do things like:</p>

<pre><code>$ pacnanny --log 2013-06-04
$ pacnanny --log yesterday
$ pacnanny --log 2013-06-01:2013-06-04
$ pacnanny --log "last month:yesterday"
</code></pre>

<p>Enjoy!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Introducing zeptodb]]></title>
    <link href="http://brandon.invergo.net/news/2013-06-07-Introducing-zeptodb.html"/>
    <updated>2013-06-07 23:39</updated>
    <id>http://brandon.invergo.net/news/2013-06-07-Introducing-zeptodb.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the first release of
<a href="http://zeptodb.invergo.net">zeptodb</a>. This code has been sitting
around gathering bitdust for a while, as a part of the erstwhile
Coredesktop project that I had been imagining. That project has gone
nowhere, leaving this essentially finished code effectively
abandoned. So, I've decided to dust it off and release it on its own
to give it the attention that it deserves.</p>

<p>zeptodb is a set of tiny tools for manipulating flat (non-relational)
databases. In fact, they are just minimal command-line programs around
the functionality of the
<a href="http://www.gnu.org/s/gdbm">GDBM library</a>. Thus, you can use them to
work with any DBM database. For the uninitiated, these are effectively
disk-bound hash tables. So, they consist only of key-value pairs, with
fast look-up, and have little to do with the relational databases that
we normally think of.</p>

<p>The tools were made to fit into pipelines in shell scripts so they all
accept queries from stdin or from text files. Basically, if you find
that you want quick data storage/retrieval in your scripts, and you
don't want the overhead of a full database, zeptodb might be of
interest to you. Also, I guess if you have the need to manipulate DBM
databases created by other programs, these might be useful as well.</p>

<p>There are three tools:</p>

<ul>
<li>zdbs: store records in a database file, creating it if it doesn't exist</li>
<li>zdbf: fetch records from a database file</li>
<li>zdbr: remove records from a database file</li>
</ul>

<p>That's it...Comments welcome. smile</p>

<p>For more information, see the included documentation (man &amp; info).</p>

<p><a href="http://zeptodb.invergo.net">zeptodb project page</a>
<a href="https://aur.archlinux.org/packages/zeptodb/">zeptodb in the Arch User Repository</a></p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Exploring the rate-limiting steps in visual phototransduction recovery by bottom-up kinetic modeling]]></title>
    <link href="http://brandon.invergo.net/news/2013-05-28-Exploring-the-rate-limiting-steps-in-visual-phototransduction-recovery-by-bottom-up-kinetic-modeling.html"/>
    <updated>2013-05-28 14:43</updated>
    <id>http://brandon.invergo.net/news/2013-05-28-Exploring-the-rate-limiting-steps-in-visual-phototransduction-recovery-by-bottom-up-kinetic-modeling.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Recently we published an article in Cell Communication and Signaling
entitled
<a href="http://www.biosignaling.com/content/11/1/36/abstract">"Exploring the rate-limiting steps in visual phototransduction recovery by bottom-up kinetic modeling"</a>.
This work was done in collaboration with Dr. Daniele Dell'Orco from
the University of Verona and Dr. Karl-Wilhelm Koch of the University
of Oldenburg, who graciously hosted me in his lab for 3 months at the
end of 2011.</p>

<p>In this article, we extended and improved a dynamic model of the
visual phototransduction pathway originally implemented by
Dr. Dell'Orco.  Most notably, we replaced a somewhat wonky description
of the interaction between the protein Rhodopsin Kinase and Recoverin,
a protein that regulates its activity. The new representation is much
more realistic and clear and is based on the latest biochemical
knowledge. We further extended the model with a dynamic
homo-oligomerization mechanism of the protein Arrestin.</p>

<p>We used this updated model to explore the dynamics of the recovery
mechanisms of a phototrasduction response. We did this by
recapitulating several experiments, showing that the model could
accurately predict the majority of different mutant states previously
generated in the lab. We also took advantage of the unique ability to
model the states of specific proteins over time during a response, in
particular to find that Arrestin oligomerization plays a role in
delaying the availability of its monomeric form for shutting down
Rhodopsin. And all of this was done without having to generate and
experiment on any mutant animals!</p>

<p>The article is open-access, so you do not have to have access to a
fancy university library to check it out, so have at it!</p>

<p>(Note: at the time of writing, only a provisional PDF is
available. This file contains some typographical errors of which we
are already aware. You may want to check back after they make
available the final format)</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of pacnanny 1.0.1]]></title>
    <link href="http://brandon.invergo.net/news/2013-05-17-Release-of-pacnanny-1.0.1.html"/>
    <updated>2013-05-17 00:00</updated>
    <id>http://brandon.invergo.net/news/2013-05-17-Release-of-pacnanny-1.0.1.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Well, I went ahead and did a release of pacnanny. Actually I did two
before I had a chance to write this post, hence the current version
is 1.0.1. Since the general announcement yesterday, I squashed a
couple of bugs, added reprinting of scriptlet messages, and I made all
features completely optional. That last point means you can customize
just how much of a pest pacnanny is. </p>

<p>Anyway, since this is only of interest to users of Arch Linux and
friends, it suffices for me to say that pacnanny is
<a href="https://aur.archlinux.org/packages/pacnanny/">available in the AUR</a>. Enjoy!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Introducing pacnanny for Arch Linux and derivatives]]></title>
    <link href="http://brandon.invergo.net/news/2013-05-15-Introducing-pacnanny-for-Arch-Linux-and-derivatives.html"/>
    <updated>2013-05-15 23:09</updated>
    <id>http://brandon.invergo.net/news/2013-05-15-Introducing-pacnanny-for-Arch-Linux-and-derivatives.html</id>
    <content type="html"><![CDATA[<p></p>

<p><code>pacnanny</code> is yet another wrapper script for <code>pacman</code>, the package
manager of Arch Linux and its various derivatives (I use
<a href="https://parabolagnulinux.org">Parabola GNU/Linux-libre</a>). Unlike other
wrappers, this script does not aim to make up for any perceived
shortcomings in the functionality of <code>pacman</code>. Instead, it aims to
make up for shortcomings in the users of <code>pacman</code>. The goal of
<code>pacnanny</code> is to make it even harder to mess up with <code>pacman</code> by
making sure that you do not miss anything important.</p>

<h2>Functionality</h2>

<p>At present, <code>pacnanny</code> does the following:</p>

<ul>
<li>Before doing a system update, check for new Arch Linux news items
since the last update and display them one at a time in the browser
of your choosing (w3m by default). There is no confirmation or
option to skip this. Your eyeballs are required to look at the news.</li>
<li>Reprint all warnings again together after the update is completed.</li>
<li>List new <code>.pacnew</code> and <code>.pacsave</code> files.</li>
<li>Print a warning and ask for confirmation when using the <code>--force</code>
option.</li>
<li>Prompt for a reboot when the kernel has been upgraded.</li>
</ul>

<h2>Usage</h2>

<p><code>pacnanny</code> is a thin wrapper that only looks at the arguments you pass
before passing them on and at the output that <code>pacman</code> produces. You
can simply use the <code>pacnanny</code> command in place of <code>pacman</code> and use all
the familiar arguments. So, to do a system update, you would do
<code>pacnanny -Syu</code>.</p>

<h2>Justification</h2>

<p>As careful as I try to be when I run <code>pacman -Syu</code>, I still
occasionally miss things, particularly during large updates that
produce a lot of text. Important warnings sometimes slip between the
cracks, causing me to miss an important new <code>.pacnew</code> file, for
example. As for the news, I do subscribe to the RSS feed but sometimes
I update the system before opening my newsreader. This forces me to
see the news first.</p>

<h2>Contributing</h2>

<p>Are there other places that we can help the user avoid shooting
himself in the foot? I'm open to ideas. Contributions are welcome as
long as they stick to the basic idea of only trying to correct/prevent
user-error/carelessness. Also, I'm not great at shell scripting, so
please point out any mistakes or places for improvement.</p>

<h2>Downloading</h2>

<p>While <code>pacnanny</code> is usable now, no release has been made yet (I'll
probably make one soon after using it day-to-day for a while). In the
meantime, you can get it from its
<a href="https://github.com/brandoninvergo/pacnanny">Github page</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of pyconfigure 0.2]]></title>
    <link href="http://brandon.invergo.net/news/2013-04-21-Release-of-pyconfigure-0.2.html"/>
    <updated>2013-04-21 16:59</updated>
    <id>http://brandon.invergo.net/news/2013-04-21-Release-of-pyconfigure-0.2.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I am pleased to announce the release of GNU pyconfigure 0.2.</p>

<p>GNU pyconfigure is a set of template files for Python developers to use
to easily implement the standard GNU configure/install process for their
packages. The standard GNU process generally consists of two familiar
steps:</p>

<pre><code>$ ./configure --prefix=/usr/
$ make install
</code></pre>

<p>By using the templates provided by GNU pyconfigure, the Python developer
gains the power and flexibility of the time-tested, language-agnostic
GNU installation process, while the user or the software packager
encounters a familiar and convenient interface.</p>

<p>GNU pyconfigure is designed to work either alongside of or in place of
the Python `distutils' module's setup.py script. Thus, if your project
already has a setup.py script, pyconfigure can simply wrap its
functionality, leveraging the work you have already done.</p>

<p>To learn more and to read the documentation, visit the website at:
http://www.gnu.org/software/pyconfigure</p>

<p>You may download the release from http://ftp.gnu.org/gnu/pyconfigure/</p>

<p>You may also download from your nearest mirror at
http://ftpmirror.gnu.org/pyconfigure/ </p>

<p>Here are the compressed sources and a GPG detached signature[*]:</p>

<ul>
<li>pyconfigure/pyconfigure-0.2.tar.gz</li>
<li>pyconfigure/pyconfigure-0.2.tar.gz.sig</li>
</ul>

<p>Here are the MD5 and SHA1 checksums:</p>

<ul>
<li>881975b519f0330165bc45f07ff85aa6  pyconfigure-0.2.tar.gz</li>
<li>4f62655779a9f3a82946ad272e2682b6c056c46e  pyconfigure-0.2.tar.gz</li>
</ul>

<p>[*] Use a .sig file to verify that the corresponding file (without the
.sig suffix) is intact.  First, be sure to download both the .sig file
and the corresponding tarball.  Then, run a command like this:</p>

<pre><code>gpg --verify pyconfigure-0.2.tar.gz.sig
</code></pre>

<p>If that command fails because you don't have the required public key,
then run this command to import it:</p>

<pre><code>gpg --keyserver keys.gnupg.net --recv-keys EB7AB74D
</code></pre>

<p>and rerun the 'gpg --verify' command.</p>

<p>Version 0.2 NEWS
This release introduces a major restructuring of pyconfigure, making
it easier to use for projects with different needs. Please read the
documentation to learn more about the changes.</p>

<ul>
<li><p>The new 'pyconf' script makes starting a new project easier.
Previously, pyconfigure's template files had to be manually copied
into new projects.  Now this process is simplified by the 'pyconf'
script that is installed with pyconfigure.  This script is called
From within a Python project's directory and copies/generates all of
the necessary files into the directory for you.  Its command-line
options support several different project needs.</p></li>
<li><p>Writing your build/install logic in Make is now supported.
In addition to having the Makefile be a wrapper around setup.py, it
is now possible to do the opposite and have setup.py be a wrapper
around the Makefile.  This allows you to write all of your build and
install logic in Make.</p></li>
<li><p>The template files contain more comments.
Many of the template files have been filled with even more useful
comments, making the process of setting up pyconfigure for your
project even easier.  Also, the 'configure.ac' template has been
rearranged into a more logical structure.</p></li>
<li><p>The new <code>PC_INIT</code> Autoconf macro simplifies getting started.
This macro makes finding a Python interpreter even easier and more
flexible by letting you specify minimum and maximum versions, freeing
you from having to write this version checking code yourself in
'configure.ac'.</p></li>
<li><p>The <code>PC_PYTHON_VERIFY_VERSION</code> macro has been made more flexible.
Of course, if you <em>do</em> want to do some kind of version checking, it
has been made even easier. You can now perform any kind of version
test with <code>PC_PYTHON_VERIFY_VERSION</code>: greater-than, less-than, equals,
etc.</p></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2013.04.06]]></title>
    <link href="http://brandon.invergo.net/news/2013-04-11-Release-of-GSRC-2013.04.06.html"/>
    <updated>2013-04-11 23:10</updated>
    <id>http://brandon.invergo.net/news/2013-04-11-Release-of-GSRC-2013.04.06.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the 2013.04.06 release of GSRC, the GNU Source
Release Collection. GSRC is a convenient means to fetch, build and
install the latest GNU software from source via a BSD Ports-like system.
Installing a package is as simple as</p>

<pre><code>$ make -C gnu/hello install
</code></pre>

<p>You can find more information and the documentation at the GSRC website:
[http://www.gnu.org/software/gsrc]</p>

<p>This release is a snapshot of the state of released GNU software at
this time. You can download this release at
<a href="http://ftp.gnu.org/gnu/gsrc">http://ftp.gnu.org/gnu/gsrc</a> or, to
download it from the nearest mirror, at
<a href="http://ftpmirror.gnu.org/gsrc/">http://ftpmirror.gnu.org/gsrc/</a></p>

<p>Of course, to stay up-to-date with the latest package releases
in-between releases of GSRC, you may choose instead to checkout the bzr
repository:</p>

<pre><code>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc
</code></pre>

<p>And keep up-to-date with the latest releases:</p>

<pre><code>$ bzr update
</code></pre>

<p>If you encounter any problems with a build script, please let me know
at bug-gsrc@gnu.org.</p>

<h3>NEWS</h3>

<ul>
<li><p><strong>Changes to the GSRC system</strong></p>

<ul>
<li><p><strong>GSRC features longer package descriptions for all GNU packages.</strong>
GSRC is now perhaps the best means of learning about the wide variety
of software provided by GNU thanks to the new long package
descriptions. These are viewable via the "pkg-info" Make target.</p></li>
<li><p><strong>GSRC provides a searchable package database in recfile format.</strong>
In addition to the "gsrc" script, you can now search the packages via
the MANIFEST.rec file with GNU Recutils. If you have downloaded GSRC
via its source archive, this file should be included. If you have
cloned the GSRC source repository, you can build it with the
"manifest" Make target.</p></li>
<li><p><strong>3rd party dependencies are no longer provided.</strong>
GSRC is not a full source distribution. Thus, all non-GNU packages
have been removed. Instead, GSRC will print a message when an
external package is required but not present on the user's system.</p></li>
<li><p><strong>Trying to build a broken packages now prints a warning first.</strong>
Unfortunately, not all GNU packages build correctly at present. To
acknowledge the known build failures, GSRC will print a message and
ask for confirmation before attempting to build such a package. This
also indicates that the GSRC maintainer is already aware of the
problem. </p></li>
</ul></li>
<li><p><strong>Changes in GSRC packages</strong></p>

<ul>
<li><p>23 packages have been added to GSRC since the last release.</p></li>
<li><p>81 packages have been updated since the last release.</p></li>
<li><p>5 builds that were previously broken have been fixed.</p></li>
<li><p><strong>Coverage statistics</strong> (Note: the totals include packages that
will not be implemented in GSRC, such as retired packages, which are
counted as completed. Broken builds are counted as incomplete. Some
packages have not yet made any releases, which are also counted as
incomplete. See the TODO file for more information.)</p>

<ul>
<li>GNU packages [395/457] [86%] (+9%)</li>
<li>GNOME packages [25/566] [4%] (+0%)</li>
<li>GNUstep packages [19/25] [76%] (+0%)</li>
</ul></li>
</ul></li>
</ul>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[My CODEML pipeline]]></title>
    <link href="http://brandon.invergo.net/news/2013-03-28-My-CODEML-pipeline.html"/>
    <updated>2013-03-28 12:13</updated>
    <id>http://brandon.invergo.net/news/2013-03-28-My-CODEML-pipeline.html</id>
    <content type="html"><![CDATA[<p></p>

<p>For my research, I make heavy usage of CODEML, a program that is part
of the Phylogenetic Analysis by Maximum Likelihood
(<a href="http://abacus.gene.ucl.ac.uk/software/paml.html">PAML</a>)
package. While the program is quite handy in general for molecular
evolutionary analysis, it's a chore to integrate into pipelines used
to analyze large numbers of genes. In the course of my research, I've
built up a pipeline that I use to simplify the process. A big part of
that, a Python interface to PAML, has since been integrated into
<a href="http://www.biopython.org">Biopython</a>. The rest of the pipeline has
slowly suffered an accumulation of the effects of bit rot. Parts of it
were poorly designed and needed to be modified each time I ran it.</p>

<p>I got tired of that so I have spent the better part of the last week
cleaning up some of the code and completely rewriting other parts of
it to be fit for usage by other people. In particular, while much of
the code that actually runs CODEML remains largely unchanged, much of
the actual pipeline logic, determining when to run each part of the
analysis, has been replaced by a (hopefully) robust Makefile. Make
already magically handles process inter-dependencies so it didn't make
sense that I was re-inventing the wheel in my Python code. The end
result is much cleaner in my opinion, even if Make recipes are a bit
harder to read than Python code.</p>

<p>I have now made the pipeline <a href="https://repos.invergo.net/codeml-pipeline">available on
Github</a>. Enjoy!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Anti-Web-Design Manifesto]]></title>
    <link href="http://brandon.invergo.net/news/2013-03-10-Anti-web-design-Manifesto.html"/>
    <updated>2013-03-10 19:50</updated>
    <id>http://brandon.invergo.net/news/2013-03-10-Anti-web-design-Manifesto.html</id>
    <content type="html"><![CDATA[<p></p>

<p>The modern web is abusive. Browsing a succession of sites is, on the
surface, a visual assault hoisted on us by designers with goals often
counter to our own interests; under the hood, it is a vector for
behavioral tracking in the name of commerce or, worse, for untold
nefarious deeds. The proliferation of tools that transform web pages
for readability, on the one hand, and ad- and javascript-blockers on
the other point to a general dissatisfaction with the status quo.</p>

<p>We face jarring and questionable changes in layout and color
schemes. Fonts change from page to page and introduce custom, one-off
glyphs. The text we read is sandwiched by menus, ads and links to more
"content." We suffer audio and video that start on their own. We are
required to use proprietary, security-hole-ridden plugins. Meanwhile,
in the background, countless scripts fetched from countless unrelated
domains waste CPU cycles.</p>

<p>The more action one takes against these problems, the more broken the
web becomes. Unfortunately, web designers have grown dependent on such
behavior, while site owners are concerned more about their site's
advertising revenue than their visitors' desires. With regards to
visual design, the fact is that any individual has a far better idea
of what constitutes comfortable-to-read text for them than a designer
could. A designer either designing for his or her own tastes or trying
to find some best-of-all-worlds design will ultimately fail to satisfy
the vast majority of visitors to the site. Instead, we have
begrudgingly grown accustomed to a completely heterogeneous web. As
for advertising and behavioral tracking, no one should have to suffer
that.</p>

<p>Here are ten maxims to which to adhere when building a new web
site. Sticking to all ten of these will help restore some sanity to
the world. As a quick and easy test to see how badly your site is
broken, load it in a minimal web browser, such as
<a href="http://www.dillo.org">Dillo</a> with both remote CSS and embedded CSS
disabled. Prepare to cringe.</p>

<p><strong>1) Completely override-able CSS</strong> If your website cannot be viewed
  properly with a custom user CSS file, it is broken. Over-dependence
  on <code>div</code> tags to get the site to look exactly the way you want it is
  guaranteed to make it difficult to read for some of your
  visitors. Designers, it may come as a surprise to you, but not
  everyone loves your work. Many people use custom CSS files to force
  a style that is easy on their eyes. Yet, a surprising number of
  sites fail to render properly if their CSS is overridden. In my
  perfect world, no websites would provide CSS files; all styling
  would be done by the user. Of course, since most people do not use
  their own stylesheets, everyone would complain about how horrible
  all these plain black-and-white sites look. So at a minimum, your
  CSS should be minimal, such that overriding it causes little
  disruption to the flow of your site.</p>

<p><strong>2) No client-side scripts</strong> If your website cannot be viewed
  properly with Javascript disabled, it is broken. There is absolutely
  no reason that your website should run a script on the visitor's
  computer, especially if the user cannot view the full source
  somewhere. No one is to be trusted online, not even you. For a
  normal, text-displaying website, using scripts is completely
  unnecessary since you can just store the text in an HTML
  document. That's what HTML is for. If you are trying to make a web
  application, just stop. Build a native application. It's nicer for
  everyone.</p>

<p><strong>3) No proprietary plugins</strong> If your website requires the
  installation of a proprietary plugin, it is broken. The endless
  stream of news about security holes found in proprietary plugins
  like Java and Flash should be an immediate hint to you that you
  shouldn't be using them. The fact that they're proprietary means
  that we cannot benefit from the careful eye of other developers who
  can spot such flaws. Not only that but support for such software is
  limited only to what the company that produces it chooses to
  support, potentially leaving many visitors out. It is not safe to
  assume that everyone who visits your site can even run such plugins,
  due to said lack of support or due to lack of computing resources
  (not everyone in the world can afford a fast computer).</p>

<p><strong>4) No advertising</strong> This is a touchy point but words will not be
  minced. Advertising is manipulative and obtrusive. Most people do
  not need to buy anything in particular at any given moment and they
  even less likely need to buy whatever is being advertised to them at
  that time. Further damning is that advertising is a common source of
  malicious content on the web, in the form of tracking cookies and
  cross-site scripting. Cramming advertising into your site in order
  to generate some kind of income is lazy at best. Some will argue
  that, since sites depend on advertising revenue to survive, then
  somehow blocking ads is immoral. It is simple: if your business
  model is simply to attach some "content" to advertising space, your
  business deserves to fail. Honestly, it will be no big loss to have
  such sites go out of business. The world does not need so many vapid
  link aggregating sites, press-release-rehashing review sites, or
  echo-chamber journalism sites. If you really must host
  advertisements, be respectful of your visitors. Host the ads on your
  own server; do not fetch them remotely. Do not use moving images,
  pop-ups, audio, video, "click-through" links, or anything else that
  serves to distract the visitor from what they actually came to your
  site to see.</p>

<p><strong>5) No frames, multi-columns or other visual clutter</strong> If your main
  text is drowned out by the surrounding content, your site is
  broken. Trying to read an article when the text is crammed between
  navigation menus, advertisements, links to more articles,
  link-sharing widgets, blogrolls, and whatever other things you
  squeeze into your site to try to keep the visitors attention is an
  absolute pain. If your site were well-organized to begin with, none
  of these would be necessary. In fact, such layouts are absurd in
  that your site is competing with itself for the reader's attention!
  One single column of text is the most comfortable reading experience
  you can give your visitor. As for all that other junk, simply make
  your site well-organized enough for it to be easily discoverable
  without having to shove it in the visitor's face.</p>

<p><strong>6) No non-standard fonts</strong> If your website absolutely depends on a
  particular font, it is broken. Fonts are subtle, in that most people
  probably do not pay much attention to which one is in use. That
  said, some people are absolute fanatics about fonts. Most web
  browsers allow the user to force the usage of their favorite
  one. Normally this is not a problem. However, increasingly websites
  are starting to use custom fonts with special glyphs that serve as
  icons on the site, presumably for bandwidth reasons (see
  <a href="http://www.github.com">Github</a> project pages, for example). This
  completely subverts the user's right to select his or her own,
  preferred font. As in the above case of CSS, never presume that you
  have a better idea of what your visitor wants to see. If they do
  have a better idea, then you should not thwart their ability to
  implement it for themselves.</p>

<p><strong>7) No tracking</strong> If your website leaks private information of your
  visitors to anyone, it is broken. This should go without
  question. You have no right to perform any behavioral metrics on
  your visitors. Their right to privacy should be paramount. Your
  revenue streams are irrelevant to them. Even more egregious is to
  allow third parties to do the tracking on your site and worse yet if
  it is done without any notification to the user. Nobody wants their
  every move tracked, be it in the web or in the real world. Respect
  your visitors' privacy and do not do any form of tracking. A word
  about cookies: unless you are providing a service that requires user
  log-in, you do not need to send them. Period.</p>

<p><strong>8) No unnecessary pagination</strong> If your website cannot fit a
  normal-length article on one page, it is broken. Web browsers,
  unlike books, have this amazing ability to scroll. Unless you are
  presenting a genuinely long document, you should not need pagination
  (though, clearly for very long documents, some pagination is
  desirable to easily mark one's place). Nevertheless, these days many
  sites unnecessarily break relatively short articles into several
  pages. This is tightly coupled to advertising: the more pages the
  visitor has to visit to read the article, the more ads can be
  presented. With no advertising, as suggested above, this problem
  would disappear.</p>

<p><strong>9) No abusive account requirements</strong> Many websites require accounts
  these days, for example to participate in some social aspect like a
  forum or comments, or to accommodate paying subscriber fees. This is
  fine. What is not fine is how much information is often required to
  subscribe. Under very few circumstances do you actually need the
  visitor's email address. Real names and mailing addresses are likely
  only necessary for online payment, which should be held quite
  separately from normal user information. In any case, if a login is
  required, take the absolute minimum of necessary information,
  ideally only a login name and a password. </p>

<p><strong>10) No new annoyances</strong> The web is a swiftly changing thing and
  there is no way this paltry list can cover all the corner cases or
  future annoyances. Before you implement anything, know that we
  probably neither need it nor want it. Please spare us from having
  yet another thing to curse about. Remember, all we want to do is
  read what you have to say. Anything else is just in the way.</p>

<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">Anti-Web-Design Manifesto</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://brandon.invergo.net" property="cc:attributionName" rel="cc:attributionURL">Brandon Invergo</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[A system-level molecular evoltionary analysis of mammalian phototransduction]]></title>
    <link href="http://brandon.invergo.net/news/2013-02-25-A-system-level-molecular-evoltionary-analysis-of-mammalian-phototransduction.html"/>
    <updated>2013-02-25 20:45</updated>
    <id>http://brandon.invergo.net/news/2013-02-25-A-system-level-molecular-evoltionary-analysis-of-mammalian-phototransduction.html</id>
    <content type="html"><![CDATA[<p> </p>

<p>Today our manuscript "<a href="https://www.biomedcentral.com/1471-2148/13/52/abstract">A system-level, molecular
evolutionary analysis of mammalian
phototransduction</a>"
was published in BMC Evolutionary Biology!</p>

<p>In this article we investigated whether the structure of
protein-protein interactions in the visual phototransduction system
accounts for some of the variation in the evolutionary rates seen in
the underlying genes. Visual phototransduction is the first step in
vision. It is the biochemical process that converts a visual stimulus
into a neuronal response. Two phototransduction pathways exist in
vertebrates, corresponding to the rod (low-light vision) and cone
(bright, color vision) photoreceptor cells.</p>

<p>In order to investigate the effects of system structure on
evolutionary rates, we hand-constructed a network containing all of
the known protein interactions involved in phototransduction in both
the rod and cone photoreceptor cells. Evolutionary rates were
estimated on a phylogenetic tree with 12 mammalian species. Using
this, we found that proteins that are more topographically central,
using the graph-theoretic closeness centrality measurement, are
subject to stronger evolutionary constraint, manifested as lower
ratios of non-synonymous to synonymous substitution rates. We also
found that different protein classes tend to be more strongly
conserved than others; in particular, G-proteins have undergonoe
stronger constraint while ion channels and pumps have experienced
relative relaxation. This indicates that selection on complex
phenotypes is manifested in a non-random manner on the underlying
genes.</p>

<p>Additionally, we describe two detected events of positive
selection. One is in the gene OPN1SW, encoding the blue/short-wave
cone opsin in the phylogenetic branch leading to the Old World
apes. By homology, we predict the specific locus under positive
selection to have a putative role in spectral tuning of the receptor,
however this is called into doubt by experimental studies. The other
gene to be found to have been under positive selection is SLC24A1, the
rod-specific sodium-calcium-potassium ion exchanger in the branch
leading to the rodents. We were unable to make predictions about the
functional relevance of this event.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Introducing m4-bloggery]]></title>
    <link href="http://brandon.invergo.net/news/2013-02-19-Introducing-m4-bloggery.html"/>
    <updated>2013-02-19 21:35</updated>
    <id>http://brandon.invergo.net/news/2013-02-19-Introducing-m4-bloggery.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've finally gotten around to setting up a clean repository with the
new system I'm using to generate this site. It's called <em>m4-bloggery</em>
and it is <a href="https://gitorious.org/bi-websites/m4-bloggery">available on
Gitorious</a>. m4-bloggery
is in fact a fork of another project called
<a href="https://github.com/datagrok/m4-bakery">m4-bakery</a>. Admittedly, most
of the hard work was already done in that project. m4-bloggery adds
some new features to support a blog-like format, namely a dynamically
generated news/blog index and an Atom XML feed. </p>

<p>The key feature of this system is that, unlike most static site
generators out there these days, it only depends on tools found by
default on all GNU/Linux systems: GNU Make, M4, and <code>find</code> (from
Findutils). No heavy Ruby or Python dependencies here! The only
"exotic" dependency is optional, and that is a command-line tool to
convert from Markdown to HTML. </p>

<p>Pages and news posts are created in a simple format and are
automatically merged into your HTML templates. Since it's all plain
text, you can edit your files offline in whatever text editor you
want. Once you're finished, you're a quick <code>make all deploy</code> away from
having your site online. </p>

<p>I don't expect that many people, if anyone, would be interested in
using this system but if you are, I hope you find it to be useful!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Mix Dump]]></title>
    <link href="http://brandon.invergo.net/news/2013-02-12-Mix-Dump.html"/>
    <updated>2013-02-12 00:52</updated>
    <id>http://brandon.invergo.net/news/2013-02-12-Mix-Dump.html</id>
    <content type="html"><![CDATA[<p></p>

<p>This weekend I happened upon some old backup CDs, which I realized had
all of my old DJ mixes on them. The mixes date back to 2000. I'm not
really DJing anymore, so it has been fun to go back and visit all the
different phases I went through and yet finding common threads running
through them. I've just uploaded every last one of them for your
listening enjoyment. They aren't perfect and some are better than
others. The styles really run the gamut. Hopefully you'll get as much
enjoyment out of listening to them as I have.</p>

<p>You can find them all <a href="music/mixes.html">here</a>. Enjoy!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Another year, another new site layout]]></title>
    <link href="http://brandon.invergo.net/news/2013-01-22-Another-year-another-new-site-layout.html"/>
    <updated>2013-01-22 20:08</updated>
    <id>http://brandon.invergo.net/news/2013-01-22-Another-year-another-new-site-layout.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Yep, another new layout. More importantly, I've based it on a
different underlying system. Octopress, which I was using before, got
me interested enough in static blog generators not to go with
something like Wordpress instead. Unfortunately, I got tired of
dealing with the mountain of Ruby dependencies it has, most of which
are not handled by my package manager. It was a chore having to
install a bunch of software just to make a post on a new system.</p>

<p>I instead sought out something that only depends on the usual software
installed on a GNU/Linux system. I saw nanoblogger, which was
interesting but honestly, it's way too complex for what I need to
occasionally update this site. Finally, I found a project on Github
called <a href="https://github.com/datagrok/m4-bakery">m4-bakery</a> which
depends only on m4 and Make, which are everywhere. It's admittedly a
bit complicated to understand its inner workings at first, thanks to
the occasional oddness of m4. In fact, its original author recommends
not actually using it. Ultimately, it was perfect. The only challenge
was to implement a news/blog index and an Atom XML feed, both of which
I eventually figured out with some Make trickery.</p>

<p>"But Brandon," you say, "this site looks like it was designed by a 14
year old in 1992." Indeed. Unfortunately, I despise web design and I
ultimately don't care very much. I copied the classic Zenburn color
scheme because I find it easy on my eyes. Everything else is pretty
plain-but-functional. The content hasn't changed, other than that my
music section lacks music while I search for an alternative to
Soundcloud. I haven't implemented a proper tagging system yet, though,
and I don't know if I will. I don't post often enough for such tags to
be useful, in my opinion.</p>

<p>Anyway, enjoy!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2013.01.06]]></title>
    <link href="http://brandon.invergo.net/news/2013-01-07-release-of-gsrc-2013-dot-01-dot-06.html"/>
    <updated>2013-01-07 11:22</updated>
    <id>http://brandon.invergo.net/news/2013-01-07-release-of-gsrc-2013-dot-01-dot-06.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm happy to announce the 2013.01.06 release of GSRC, the GNU Source
Release Collection. GSRC is a convenient means to fetch, build and
install the latest GNU software from source via a BSD Ports-like system.
Installing a package is as simple as</p>

<pre><code>$ make -C gnu/hello install
</code></pre>

<p>You can find more information and the documentation at the GSRC website:
http://www.gnu.org/software/gsrc</p>

<p>This release is a snapshot of the state of released GNU software at this
time. You can download this release at http://ftp.gnu.org/gnu/gsrc or,
to download it from the nearest mirror, at http://ftpmirror.gnu.org/gsrc/</p>

<p>Of course, to stay up-to-date with the latest package releases
in-between releases of GSRC, you may choose instead to checkout the bzr
repository:</p>

<pre><code>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc
</code></pre>

<p>And keep up-to-date with the latest releases:</p>

<pre><code>$ bzr update
</code></pre>

<p>If you encounter any problems with a build script, please let me know
at bug-gsrc@gnu.org.</p>

<h2>NEWS</h2>

<ul>
<li><p>Changes to the GSRC system</p>

<ul>
<li><p>GSRC may now optionally redirect build output</p>

<p>All output during the build process may be redirected elsewhere
via the REDIRECT_OUTPUT variable in the file 'gar.conf.mk'.</p></li>
<li><p>GSRC messages may now optionally be colorized </p>

<p>GSRC-specific messages may be (unobtrusively) colorized via the
USE_COLOR variable in the file 'gar.conf.mk'. Alternatively,
message text delimiters (i.e. '==>' or '<em>*</em>' at the start of a
line) may be customized in the same file.</p></li>
<li><p>GSRC now supports alternate package configurations </p>

<p>Multiple configurations of a package may be available
side-by-side via the GARPROFILE variable, which is appended to
a package's name. Thus, you might have a package foo-1.0 as
well as a different configuration of it,
foo-1.0-new-config. When you install the package, you simply
select which configuration you want by passing the GARPROFILE
variable.</p></li>
<li><p>Large GNU sub-projects now have their own directories </p>

<p>GNOME and GNUStep packages have been moved to their own package
sub-directories, for organizational reasons. Thus, to install
GTK+, you now should use 'make -C gnome/gtk install' rather
than 'make -C gnu/gtk install'</p></li>
<li><p>User configuration of packages is now isolated from build recipes</p>

<p>All packages now have a 'config.mk' file in addition to the
usual 'Makefile'. All user configuration of the package may be
done in this new file, separating it from the build recipe,
which should not need modification.</p></li>
<li><p>The new 'gsrc' script facilitates package discovery</p>

<p>This script simplifies the process of searching for packages,
printing information about them and finding their GSRC
directories.</p></li>
<li><p>GSRC has three new targets to use on packages.</p>

<ul>
<li>pkg-info</li>
</ul>

<p>This target may be used to display useful information
about a package, including a description.</p>

<ul>
<li>pkg-info-curt</li>
</ul>

<p>This target is similar to 'pkg-info' but in a short form
which is ideal for printing lists of packages</p>

<ul>
<li>help-config </li>
</ul>

<p><p>This target prints the configuration options available for
a package.</p></li>
</ul></p></li>
<li><p>Changes in GSRC packages</p>

<ul>
<li><p>70 packages have been added to GSRC since the last release.</p></li>
<li><p>69 packages have been updated to new versions in GSRC since the last release</p></li>
<li><p>56 build recipes that were previously broken have been fixed</p></li>
<li><p>Coverage statistics. </p>

<p>Note: the totals include packages that will not be implemented
in GSRC, such as retired packages, which are counted as
completed. Broken builds are counted as incomplete. See TODO
for more information.</p>

<ul>
<li><p>GNU packages [352/452] [77%] (+19%)</p></li>
<li><p>GNOME packages [25/566] [4%] (+3%)</p></li>
<li><p>GNUstep packages [19/25] [76%] (+76%)</p></li>
</ul></li>
</ul></li>
</ul>

<p>For a complete list of new and updated packages see the NEWS file in
the GSRC distribution.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Damn It Mendeley]]></title>
    <link href="http://brandon.invergo.net/news/2012-12-13-Damn-It-Mendeley.html"/>
    <updated>2012-12-13 12:08</updated>
    <id>http://brandon.invergo.net/news/2012-12-13-Damn-It-Mendeley.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Mendeley is one of the last couple of non-free programs that I depend
on, simply because I have not found a suitable alternative yet. And
now here I am taking time out of my extremely busy day to vent about
it. God damn it, Mendeley, I can't take it anymore. I'm done with it. </p>

<p>To be honest, I'm not 100% sure what Mendeley is doing
behind-the-scenes (part and parcel of its proprietary, closed-source
nature) but it appears that, when it comes to filling in the metadata
for an article, it not only uses reputable sources such as PubMed but
it also refers to what other Mendeley users have filled in for that
article. If this is true, it is a horrible idea because, as it turns
out, most scientists are idiots when it comes to this. I'm not prone
to using internet catch phrases, but every time I import a new article
into Mendeley, I'm forced to mutter "Oh, what fresh hell is this?"</p>

<p>Some examples:</p>

<ul>
<li><p>A period is automatically appended to the article title. Sorry guys,
that period is part of citation formatting, <em>not</em> part of the
title. Let the citation style add it.</p></li>
<li><p>Shortening of page numbers (i.e. 517-19 instead of 517-519). Sorry
guys, that numeric shortening is part of citation formatting. Let
the citation style do it. For the occasion that the citation style
calls for the full page numbers, you force me to check visually
every single citation to make sure someone didn't shorten it because
they think it looks cool.</p></li>
<li><p>Adding publisher location after a journal name. When I cite a paper
from Science, I don't want the citation to read "Science (New York,
NY)" because the journal is just called Science. Add your
unnecessary metadata somewhere else. I'm tired of having to remove
it so that my citations are correct.</p></li>
<li><p>Adding society information after a journal name. I don't care that
the Journal of Neuroscience is the official journal of the Society
of Neuroscience. Once again, put your unnecessary metadata somewhere
else so I don't have to remove it just to have correct citations</p></li>
<li><p>Journal names in sentence case. Seriously, this one is a shock to
me. Article titles are in sentence case. Journal titles are in title
case. It's not difficult. Now I have both "Journal of Neuroscience"
and "Journal of neuroscience" in my journal filter and once again I
need to manually intervene on the vast majority of files that I
import before I cite them in a manuscript.</p></li>
<li><p>Multiple variations on a journal name. My database has articles from
PNAS, Proceedings of the National Academy of Sciences, Proceedings
of the National Acadamy of Sciences of the United States of America,
Proceedings of the National Acadamy of Sciences of the USA, and any
number of variations depending on creative capitalization of
these. </p></li>
<li><p>Multiple variations on a journal name for the <em>same article</em>. (ie
Proceedings of the National Acadamy of Sciences : PNAS)</p></li>
<li><p>Here's a new one that prompted this post: adding authors as "Last
name, first name middle initials full initials" (ie Smith, Joe M
JM). Great, so now when I cite it in a manuscript, I get Smith,
JMJM. That is absolutely wonderful. So now I have a new thing to
manually edit every time I import. </p></li>
<li><p>Author initials when the full name is available. If the article
lists the full names of the authors, please use them. Again, let the
citation style handle initials</p></li>
<li><p>Mixed case author initials! Are you kidding me? One of
<a href="http://www.mendeley.com/c/5315170454/p/31617/talevich-2012-biophylo-a-unified-toolkit-for-processing-analyzing-and-visualizing-phylogenetic-trees-in-biopython/">my own articles</a>
had middle initials in lower case ("Cock, Peter Ja", "Chapman, Brad
a") (note the journal title while you're at it). What an
embarrassment. But don't worry about consistency because my name
was listed as "Invergo, Brandon M". One out of three correct 
isn't bad, right? Right? (the fourth author had no middle initial)</p></li>
<li><p>Mixing initials with and without periods. Of all the points so far,
this one's probably down to personal taste; if the full names aren't
available and you put the initials, you may choose to put periods
between the letters of the initials. But for the love of whatever
you find sacred, don't use periods in some of the author's names and
then not use them for some authors in the same damn article.</p></li>
</ul>

<p>I'm sure I've encountered more annoyances but that's enough for
now. What is the point of automatically extracting/fetching metadata
if you have to manually edit it every time? I've wasted far too much
time just trying to standardize all of the articles in my database.</p>

<p>The most asinine part of this is that the only way to provide such
feedback to Mendeley is through some feedback system that depends on
votes to get your suggestion seen. Needless to say, back when I
still had hope, I
<a href="http://feedback.mendeley.com/forums/4941-general/suggestions/435480-standardise-metadata-formats">suggested that they filter metadata</a>.
That was two years ago and it has only garnered 9 votes, 3 of which
are my own. This is obviously a huge flaw in their software
(everyone around me complains and curses at the software
constantly), but for the suggestion to get noticed it has to compete
in the arena with more important suggestions like allowing to
highlight in colors other than yellow. Who decided that this was a
good idea? Why should bugs have to compete with feature requests? Why
not use a good, old-fashioned bug tracker? </p>

<p>So like I said, I've had enough. Good riddance to Mendeley. After this
current manuscript, it's being removed from my harddrive. It's looking
like I can use <a href="http://www.molspaces.com/cb2bib/">cb2bib</a> for metadata extraction into bibtex files and
then
<a href="http://bibus-biblio.sourceforge.net/wiki/index.php/Main_Page">bibus</a>, 
<a href="http://www.pybliographer.org">pybliographer</a> or
<a href="icculus.org/referencer/">referencer</a> for working with those
files. But whatever I do, I can no longer place faith in the basic
citation capabilities of my peers. Sorry guys/gals. </p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[pyifbabel 0.2.3 released]]></title>
    <link href="http://brandon.invergo.net/news/2012-11-26-pyifbabel-0-dot-2-3-released.html"/>
    <updated>2012-11-26 18:18</updated>
    <id>http://brandon.invergo.net/news/2012-11-26-pyifbabel-0-dot-2-3-released.html</id>
    <content type="html"><![CDATA[<p></p>

<p>After a long time of much inactivity, I'm happy to announce the
release of pyifbabel 0.2.3. pyifbabel is a developer library
implementing the Treaty of Babel for extracting metadata from
interactive fiction story files. This release is not an interesting
one, in terms of new features. However, it consists of a lot of bug
fixes that have accumulated since the last release, particularly in
the IFiction file handling code. Therefore, if you use the library it
is highly recommended to update to the latest version. </p>

<p>pyifbabel forms the foundation of the next release of Grotesque (yes,
it's still in the works). Already, the development version of
Grotesque which uses pyifbabel is much more successful at extracting
metadata from story files than the previous version of Grotesque does
on its own. That said, don't bother trying out the development version
of Grotesque since it's highly broken in other ways! </p>

<p>You can download pyifbabel 0.2.3
<a href="http://grotesque.invergo.net/downloads/pyifbabel/pyifbabel-0.2.3.tar.gz">here</a>
or you can install it using pip with <code>pip install pyifbabel</code>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Release of GSRC 2012.09.06]]></title>
    <link href="http://brandon.invergo.net/news/2012-09-12-release-of-gsrc-2012-dot-09-dot-06.html"/>
    <updated>2012-09-12 17:47</updated>
    <id>http://brandon.invergo.net/news/2012-09-12-release-of-gsrc-2012-dot-09-dot-06.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm about 6 days late in posting this to my own blog:</p>

<p>I'm happy to announce the 2012.09.06 release of GSRC, the GNU Source 
Release Collection. GSRC is a convenient means to fetch, build and 
install the latest GNU software from source via a BSD Ports-like system. </p>

<p>Installing a package is as simple as </p>

<pre><code>$ make -C gnu/hello install
</code></pre>

<p>You can find more information and the documentation at the
<a href="http://www.gnu.org/software/gsrc">GSRC website</a>.</p>

<p>This release is a snapshot of what is really a rolling process. The current 
snapshot has build scripts for 271 packages but new packages are added 
and old packages are updated frequently. You can download this release 
at <a href="http://ftp.gnu.org/gnu/gsrc">http://ftp.gnu.org/gnu/gsrc</a> or, to download it from the nearest 
mirror, <a href="http://ftpmirror.gnu.org/gsrc/">http://ftpmirror.gnu.org/gsrc/</a></p>

<p>Of course, to stay up to date in between releases of GSRC, you may 
choose instead to checkout the bzr repository: </p>

<pre><code>$ bzr checkout bzr://bzr.savannah.gnu.org/gsrc/trunk/ gsrc
</code></pre>

<p>And keep up-to-date with the latest releases: </p>

<pre><code>$ bzr update
</code></pre>

<p>If you encounter any problems with a build script, please let me know 
at <a href="mailto:bug-gsrc@gnu.org">bug-gsrc@gnu.org</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Article about Bio.Phylo published in BMC Bioinformatics]]></title>
    <link href="http://brandon.invergo.net/news/2012-08-27-article-about-bio-dot-phylo-published-in-bmc-bioinformatics.html"/>
    <updated>2012-08-27 11:41</updated>
    <id>http://brandon.invergo.net/news/2012-08-27-article-about-bio-dot-phylo-published-in-bmc-bioinformatics.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Last week, an article I co-authored about the new Bio.Phylo module of
<a href="www.biopython.org">Biopython</a> was published. My primary contribution was the
dedicated <a href="http://abacus.gene.ucl.ac.uk/software/paml.html">PAML</a> sub-module,
which eases the job of incorporating this phylogenetic analysis toolbox into
computational pipelines. It is notorious for generating output which is a chore
to parse, so most of the effort was involved in parsing the result files.
However, the program's dependence on control files rather than commandline
switches makes it a bit of a pain to script as well, so the module strives to
make your life easier in that regard too. </p>

<p>Outside of my submodule, Bio.Phylo provides a great number of useful tools for
both analyzing and visualizing phylogenetic data, and I expect the module to be
of great use for many researchers.</p>

<p>The article was published in the open-access journal BMC Bioinformatics and you
can read it <a href="http://www.biomedcentral.com/1471-2105/13/209/abstract">here</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Using GNU Stow to manage your dotfiles]]></title>
    <link href="http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html"/>
    <updated>2012-05-26 14:18</updated>
    <id>http://brandon.invergo.net/news/2012-05-26-using-gnu-stow-to-manage-your-dotfiles.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I accidentally stumbled upon something yesterday that I felt like
sharing, which fell squarely into the "why the hell didn't I know about this
before?" category. In this post, I'll describe how to manage
the various configuration files in your GNU/Linux home directory (aka 
"dotfiles" like <code>.bashrc</code>) using GNU Stow. </p>

<p>The difficulty is that it would be helpful to manage one's
configuration files with a version control system like Git, Mercurial
or Bazaar, but many/most dotfiles reside at the top-level of your home
directory, where it wouldn't be a good idea to initialize a VCS
repository. Over time I've come across various programs which aim to
manage this for you by keeping all the files in a subdirectory and
then installing or linking them into their appropriate places. None of
those programs ever really appealed to me.  They would require a ton
of dependencies (like Ruby and a ton of libraries for it) or they
would require me to remember how to use them, which is difficult when
really for such a task you rarely use the program.</p>

<p>Lately I've been using <a href="http://www.gnu.org/software/stow">GNU Stow</a> to manage
programs I install from source to <code>/usr/local/</code>. Basically, in this typical
usage, you install locally built packages to
<code>/usr/local/stow/${PKGNAME}-{PKGVERSION}</code> and then from <code>/usr/local/stow/</code> you run
<code># stow ${PKGNAME}-${PKGVERSION}</code> and the program generates symbolic links to
all the programs' files into the appropriate places under <code>/usr/local/</code>. Then,
when you uninstall a program via Stow, you don't have to worry about any stray
files that you or a provide Makefile may have missed. It also makes handling
alternate versions of a program quite easy (i.e. when I'm experimenting with
different configurations of <a href="http://dwm.suckless.org">dwm</a> or
<a href="http://st.suckless.org">st</a>).</p>

<p>Some time ago I happened across a mailing list posting where someone described
using Stow to manage the installation of their dotfiles. I didn't pay much
attention to it but my brain must have filed it away for later. Yesterday I
decided to give it a try and I have to say that it is so much more convenient
than those other dedicated dotfile-management programs, even if it wasn't an
immediately obvious option.</p>

<p>The procedure is simple. I created the <code>${HOME}/dotfiles</code> directory and then
inside it I made subdirectories for all the programs whose cofigurations I
wanted to manage. Inside each of those directories, I moved in all the
appropriate files, maintaining the directory structure of my home directory. So,
if a file normally resides at the top level of your home directory, it would go
into the top level of the program's subdirectory. If a file normally goes in the
default <code>${XDG_CONFIG_HOME}/${PKGNAME}</code> location (<code>${HOME}/.config/${PKGNAME}</code>), 
then it would instead go in <code>${HOME}/dotfiles/${PKGNAME}/.config/${PKGNAME}</code> and 
so on. Finally, from the <code>dotfiles</code> directory, you just run <code>$ stow $PKGNAME</code>
and Stow will symlink all the package's configuration files to the appropriate
locations. It's then easy to make the <code>dotfiles</code> a VCS repository so you can
keep track of changes you make (plus it makes it so much easier to share
configurations between different computers, which was my main reason to do it).</p>

<p>For example, let's say you want to manage the configuration for Bash, VIM and
Uzbl. Bash has a couple files in the top-level directory; VIM typically has your
.vimrc file on the top-level and a .vim directory; and Uzbl has files in
<code>${XDG_CONFIG_HOME}/uzbl</code> and <code>${XDG_DATA_HOME}/uzbl</code>. So, your home directory
looks like this:</p>

<pre><code>home/
    brandon/
        .config/
            uzbl/
                [...some files]
        .local/
            share/
                uzbl/
                    [...some files]
        .vim/
            [...some files]
        .bashrc
        .bash_profile
        .bash_logout
        .vimrc
</code></pre>

<p>You would then create a <code>dotfiles</code> subdirectory and move all the files there:</p>

<pre><code>home/
    /brandon/
        .config/
        .local/
            .share/
        dotfiles/
            bash/
                .bashrc
                .bash_profile
                .bash_logout
            uzbl/
                .config/
                    uzbl/
                        [...some files]
                .local/
                    share/
                        uzbl/
                            [...some files]
            vim/
                .vim/
                    [...some files]
                .vimrc
</code></pre>

<p>Then, perform the following commands:</p>

<pre><code>$ cd ~/dotfiles
$ stow bash
$ stow uzbl
$ stow vim
</code></pre>

<p>And, voila, all your config files (well, symbolic links to them) are
all in the correct place, however disorganized that might be, while
the actual files are all neatly organized in your <code>dotfiles</code>
directory, which is easily turned into a VCS repo. One handy thing is
that if you use multiple computers, which may not have the same
software installed on them, you can pick and choose which
configurations to install when you need them. All of your dotfiles are
always available in your <code>dotfiles</code> directory, but if you don't need
the configuration for one program, you simply don't Stow it and thus
it does not clutter your home directory.</p>

<p>Well, that's all there is to it. Hopefully someone else out there
finds this useful! I know I've found it to be a huge help.</p>

<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">Using GNU Stow to Manage Your Dotfiles</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://brandon.invergo.net" property="cc:attributionName" rel="cc:attributionURL">Brandon Invergo</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[pyIFBabel 0.2 released]]></title>
    <link href="http://brandon.invergo.net/news/2012-05-05-pyifbabel-0-dot-2-released.html"/>
    <updated>2012-05-05 13:54</updated>
    <id>http://brandon.invergo.net/news/2012-05-05-pyifbabel-0-dot-2-released.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Version 0.2 of <a href="http://grotesque.invergo.net/pyifbabel">pyIFBabel</a>, a Treaty of 
Babel library for Python, has just been released. This version fixes some bugs 
in IFiction file handling in the previous version. However, the most 
significant development has been in the <code>treatyofbabel.ifstory</code> module, which 
was altogether non-functional in version 0.1. This module defines the <code>IFStory</code> 
class, which makes it simple to work with story files and their metadata 
information. With this, I now have what I need to integrate the new pyIFBabel
functionality back into <a href="http://grotesque.invergo.net">Grotesque</a> (though I 
will return to pyIFBabel to implement some further features which will 
eventually end up in Grotesque as well).</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Appointed as the new maintainer for GNU GSRC]]></title>
    <link href="http://brandon.invergo.net/news/2012-04-08-appointed-as-the-new-maintainer-for-gnu-gsrc.html"/>
    <updated>2012-04-08 21:07</updated>
    <id>http://brandon.invergo.net/news/2012-04-08-appointed-as-the-new-maintainer-for-gnu-gsrc.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm very excited to have been appointed as the maintainer of 
<a href="http://www.gnu.org/software/gsrc">GNU GSRC</a>. GSRC is a system for downloading and
installing the latest GNU software from source. It's similar to BSD Ports due to
being based on GAR and GARStow. I took on this job because the project covers a
large portion of the functionality for a GNU/Linux distribution I've been
thinking about which would form the underlying basis of the
<a href="http://brandon.invergo.net/software/coredesktop.html">Coredesktop</a> idea that's
been floating around in my head. Not to mention, I felt like volunteering some
of my time to the GNU project. I think GSRC is a great system, which really
exploits the advantages of GNU Make for taking care of dependencies and such (as
opposed to other Ports-inspired systems which choose to reimplement even this 
basic functionality). GSRC has been left unmaintained for a little while, but 
once it gets brought up to date, I'd like to start exploring the possibility of 
founding a super-hackable distro based on it.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Thing of the Month: pyIFBabel 0.1]]></title>
    <link href="http://brandon.invergo.net/news/2012-04-05-thing-of-the-month-pyifbabel-0-dot-1.html"/>
    <updated>2012-04-05 12:12</updated>
    <id>http://brandon.invergo.net/news/2012-04-05-thing-of-the-month-pyifbabel-0-dot-1.html</id>
    <content type="html"><![CDATA[<p></p>

<p><em>[Edit: nevermind, I'm no longer pursuing this Thing of the Month idea.]</em></p>

<p>April's Thing of the Month is the first beta release of
<a href="http://grotesque.invergo.net/pyifbabel">pyIFBabel</a>, which is a Python module
implementing the <a href="http://treaty.ifarchive.org">Treaty of Babel</a>. The Treaty of
Babel is an agreement between the developers of several different interactive
fiction (aka "text adventure"; IF) authoring tools in order to provide a standardized way of identifying
IF story files, as well as how to handle metadata and cover art stored in wrapper 
files. The official Treaty page features a C API as well as a commandline tool
written in C. On the other hand, I inherited the
<a href="http://grotesque.invergo.net">Grotesque</a> project with a partially complete
API written in pure Python. I've worked hard to complete that API to support all
of the story formats covered by the Treaty and to make it on par with the
official C implementation. This first release represents that goal being mostly
reached and ready for testing and use by other developers (this really is for a
niche of a niche: developers of software utilities for interactive fiction).
There's still more work to be done and a few more features to implement but I
think it's at a good state to release to the world ("Release early, release
often.")</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Pop Quiz]]></title>
    <link href="http://brandon.invergo.net/news/2012-03-14-pop-quiz.html"/>
    <updated>2012-03-14 10:58</updated>
    <id>http://brandon.invergo.net/news/2012-03-14-pop-quiz.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Fill in the blanks:</p>

<blockquote>
  <p>The justification for war that seemed most compelling was that <code>______</code>
was on its way to building a nuclear bomb, but the evidence for this
was very weak. Before the crisis over <code>______</code>, Western intelligence
sources had estimated it would take <code>______</code> three to ten years to build
a nuclear weapon. Even if <code>______</code> could build a bomb in a year or two,
which was the most pessimistic estimate, it had no delivery system to
send it anywhere. Besides, Israel already had nuclear weapons. And the
United States had perhaps 30,000 of them. The <code>______</code> administration
was trying hard to develop a paranoia in the nation about an <code>______</code>
bomb which did not yet exist.</p>
</blockquote>

<ul>
<li><strong>a)</strong> Iraq / Kuwait / Iraq / Iraq / [George H. W.] Bush / Iraqi</li>
<li><strong>b)</strong> Iraq / 9/11 / Iraq / Iraq / [George W.] Bush / Iraqi</li>
<li><strong>c)</strong> Iran / Israel / Iran / Iran / Obama / Iranian</li>
</ul>

<p>The correct answer is <strong>a</strong>, with the quote taken from Howard Zinn's <em>A People's
History of the United States: 1492 - Present</em>. It's so frustrating to see
history repeat itself.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Fukushima Dawn Flyer]]></title>
    <link href="http://brandon.invergo.net/news/2012-03-09-fukushima-dawn-flyer.html"/>
    <updated>2012-03-09 15:27</updated>
    <id>http://brandon.invergo.net/news/2012-03-09-fukushima-dawn-flyer.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Lhotse has created a nice flyer for the first 
<a href="http://coldmountainrecords.bandcamp.com">Cold Mountain Records</a> release.
So, if you would like to help us promote the release a bit in the real world
please print it out and put it anywhere you think people would be 
interested! You can download the image (at a super-high quality ~35MB) 
<a href="http://brandon.invergo.net/images/music/cmr001-flyer.tif">here</a>.</p>

<p><img src="../img/music/cmr001-flyer-small.png" alt="CMR001 Flyer" title="" /></p>

<p>Help us spread the word!</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Moving my coding over to Gitorious]]></title>
    <link href="http://brandon.invergo.net/news/2012-02-27-moving-my-coding-over-to-gitorious.html"/>
    <updated>2012-02-27 11:18</updated>
    <id>http://brandon.invergo.net/news/2012-02-27-moving-my-coding-over-to-gitorious.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Recently I've been working hard to consolidate my web presence and to
reduce the number of websites on which I depend. One area where I'm a bit
too spread out is programming-related sites. I have repositories on Github,
Bitbucket, Sourceforge, Gitorious and Google Code. Ok, the Google Code ones
are old and not used anymore. Sourceforge is just being used for Grotesque,
since the project wasn't started by me, and I find it to be not very user-
friendly ("hulking" would be an appropriate term). It's not really 
appropriate for little projects that may or may not go anywhere. I have a 
couple of private repositories on Bitbucket, which I don't really use. So, 
I've decided to choose one site and move all my projects there.</p>

<p>In looking at the features of all the sites I use, it was clearly down to
Github and Gitorious. Both are pretty sleek sites and both allow easy 
forking and merging of repositories. From my perspective, the fundamental
difference between the two is that Github is user-centric while Gitorious is
project-centric. Github's "killer feature" is its so-called "social 
programming." In reality, however, I don't really use it. After being on the
site for three years, I'm still only following two people and I am, in turn,
only being followed by the same two people. The only repository that I have
forked and performed subsequent pull requests is that of Biopython, a big
project. </p>

<p>Github does have a few big features that Gitorious lacks, namely an issue 
tracker and project websites. The latter is not a big concern for me; I'd
rather host project sites on this server. The former is a bit of a concern,
in that I haven't seen a very good alternative. Fortunately, I only have
one project that has reached a level of maturity in which other people are
using it, Grotesque. Given that it caters to a particular niche and that I'm
the only active developer, I can handle bug reports by email for now. The
other features of Github, tend towards the social aspect, which again, I 
don't use.</p>

<p>The main thing that draws me towards Gitorious is that I can organize my
repositories. So, I can have a project dedicated to Grotesque, with separate
repos for the main application and for an external library developed for 
it. I can have a separate project just for the repositories for the code
behind my websites. Finally, I have a project just for my half-baked
ideas that probably aren't of interest yet to anyone but me.</p>

<p>One other thing is also worth mentioning. While I certainly don't have any
of the complaints about Github that I did about Facebook and Twitter, I have
become increasingly aware of and concerned about <a href="http://www.gnu.org/philosophy/free-sw.html">free software</a> 
as defined by the Free Software Foundation (free as in freedom, not free as
in beer). I hate externalized dogmatism, so I won't argue my stance on this,
but the fact that Gitorious is based on free software while that of Github
is proprietary did play a small role in the decision. It wasn't so clear-cut
as with Facebook and Twitter, though, since I don't really have any 
concern that Github's software is up to anything nefarious. So, that was
just a "moral bonus" to switching to Gitorious. For the record, there is
still non-free software that I depend on (Skype (unfortunately), Spotify,
and basically all of the music production software I use), so I'm not really
a model free software advocate.</p>

<p>You can visit my Gitorious public profile <a href="https://www.gitorious.org/~brandoninvergo">here</a>.
I still have a few more projects to add there but my main active ones are 
up. I'll still have my Github <a href="https://github.com/brandoninvergo">account</a> 
of course, so I can still participate in projects there like Biopython. As
for private repositories, I can, of course, just host them here.</p>

<p>What would be best, of course, is if someone came up with a federated Git
hosting service, so I can host my repositories on this site but people could
still easily do merge/pull requests.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Biopython 1.59 released]]></title>
    <link href="http://brandon.invergo.net/news/2012-02-24-biopython-1-dot-59-released.html"/>
    <updated>2012-02-24 17:44</updated>
    <id>http://brandon.invergo.net/news/2012-02-24-biopython-1-dot-59-released.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Biopython 1.59 was released today. I had a few small contributions to this 
one. The main user-noticable one was that I implemented support for
sequential Phylip alignment files (in addition to the already-supported
interleaved format). In addition, I overhauled the tests for parsing the
output of PAML programs for the Bio.Phylo.PAML module. This helped me catch
and fix a few obscure bugs.</p>

<p>The release itself has lots of new features that are of interest. You can
read the full release notes <a href="http://news.open-bio.org/news/2012/02/biopython-1-59-released/">here</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Updated the Grotesque website]]></title>
    <link href="http://brandon.invergo.net/news/2012-02-23-updated-the-grotesque-website.html"/>
    <updated>2012-02-23 12:01</updated>
    <id>http://brandon.invergo.net/news/2012-02-23-updated-the-grotesque-website.html</id>
    <content type="html"><![CDATA[<p></p>

<p>After not being able to work on it for the past half-year, I'm finally 
getting back to working on Grotesque, a library manager for interactive
fiction (aka "text adventures").</p>

<p>I'm not sure that there's any overlap between people who read this page and
people who use the software. Anyway, I've updated the website for Grotesque
(which now looks suspiciously like this website), and I've included a
development blog in the new site so people can see how development is
progressing.</p>

<p>You can visit the site at <a href="http://grotesque.invergo.net">http://grotesque.invergo.net</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Re-installing all reverse dependencies of packages in Arch Linux with Pacman]]></title>
    <link href="http://brandon.invergo.net/news/2012-02-13-rebuilding-all-reverse-dependencies-of-packages-in-arch-linux-with-pacman.html"/>
    <updated>2012-02-13 11:11</updated>
    <id>http://brandon.invergo.net/news/2012-02-13-rebuilding-all-reverse-dependencies-of-packages-in-arch-linux-with-pacman.html</id>
    <content type="html"><![CDATA[<p></p>

<p>[<em>note</em>: this was originally entitled "Rebuilding all reverse dependencies...", which was obviously incorrect. it was supposed to be "Reinstalling..."]</p>

<p>This post is mainly a reminder for myself in case the situation ever comes up
again but, of course, it could always prove useful for someone else.</p>

<p>Recently, updates to <code>libpng</code> and <code>libtiff</code> in Arch Linux required a rebuild of
all packages that depend on them, thus they all needed to be
re-installed manually. I knew there must be a more efficient way to do
this than to search the package listing on the Arch website to find all the 
packages that depend on these two and then to manually check which ones of those I
have installed (this is what I started doing at first).</p>

<p>So, that's when I put together this:</p>

<pre><code>    pacman -S `cat &lt;(pactree -lrud1 libpng) &lt;(pactree -lrud1 libtiff) | sort | uniq`
</code></pre>

<p><code>pactree -lrud1 </code> lists all of the reverse dependencies of package  to a depth
of one (so only the ones that directly depend on it). If you have to do this for
multiple packages, you can <code>cat</code> together their output. Then you just sort the list
and get rid of duplicates with <code>uniq</code>. </p>

<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">Rebuilding All Reverse Dependencies of Packages in Arch Linux with Pacman</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://brandon.invergo.net" property="cc:attributionName" rel="cc:attributionURL">Brandon Invergo</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Introducing Cold Mountain Records]]></title>
    <link href="http://brandon.invergo.net/news/2012-02-08-introducing-cold-mountain-records.html"/>
    <updated>2012-02-08 16:37</updated>
    <id>http://brandon.invergo.net/news/2012-02-08-introducing-cold-mountain-records.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I'm very excited to announce the creation of 
<a href="http://coldmountainrecords.bandcamp.com">Cold Mountain Records</a>, in collaboration 
with Greg Pappas (aka <a href="http://zxyzxy.bandcamp.com">zxyzxy</a>). We'll be using it as a
vehicle for releasing our various forays in music. </p>

<p>Our first release is a split e.p. entitled "Fukushima Dawn", featuring two
contemplative songs each by Greg as Lhotse and by me as Yeti Quest.
The e.p. will be available for download from our site on March 11, 
commemorating the one-year anniversary of the earthquake and tsunami in 
Japan, with pre-orders starting now. All proceeds from the release will go 
towards the on-going relief effort in Japan. </p>

<p><img src="../img/music/yq-fukushima_dawn.png" alt="Fukushima Dawn cover" title="" /></p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[So long]]></title>
    <link href="http://brandon.invergo.net/news/2012-01-25-so-long.html"/>
    <updated>2012-01-25 13:04</updated>
    <id>http://brandon.invergo.net/news/2012-01-25-so-long.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've decided that I've finally had enough of social networking. The
privacy issues have been written about countless times by people far
more eloquent and informed than me, so I won't go into them. Beyond
those, the biggest problem remaining was that social networking is a
huge time sink for me.  Granted, a lack of friends using Diaspora and
Identi.ca guaranteed that I never spent much time on either
service. Since quitting Facebook back in October, though, my time
spent on Twitter skyrocketed. Looking at it, though, I realize I
wasn't actually getting much out of it other than a means to kill
time. Furthermore, analyzing my own posts, I realized I wasn't
contributing anything either. If there's anything worth saying, it
will be worth saying long-form here on this blog.</p>

<p>As for anyone who depended on social networking to keep up with my
life and stay in contact with me, I recommend subscribing to this
site's RSS feed for news in my life and using good, old email to reach
me.</p>

<p>If a more sane, restrained form of social networking emerges, which
allows me to be better in contact with my closest friends, then I may
consider using it, but until then, the firehose form of social
networking offered by current services just won't cut it.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[My remix of zxyzxy in a gallery promo video]]></title>
    <link href="http://brandon.invergo.net/news/2012-01-19-my-remix-of-zxyzxy-in-a-gallery-promo-video.html"/>
    <updated>2012-01-19 18:41</updated>
    <id>http://brandon.invergo.net/news/2012-01-19-my-remix-of-zxyzxy-in-a-gallery-promo-video.html</id>
    <content type="html"><![CDATA[<p></p>

<p>So this is pretty cool. My remix of zxyzxy's song "Sullen" (as Northern 
Implosion) was used in a promotional video for Setba, an art gallery and 
cultural space in Barcelona's Plaza Real! The video was made by a company
called <a href="http://www.cityblink.com">CityBlink</a>, which provides a great 
city-discovery service, in which places of interest in a city are marked on
a map and accompanied by high-quality photos and video to give you a good
idea of what's on offer. In the case of the videos, they use music from
local musicians (like myself in this case), which I think is great.</p>

<p>You can see the video with my music <a href="http://cityblink.com/#!/art-culture/4441/setba">here</a>. You can hear the full song <a href="http://soundcloud.com/yxz/06-sullen-northen-implosion">here</a>.</p>

<p>I highly recommend checking out zxyzxy's music: <a href="http://zxyzxy.bandcamp.com">http://zxyzxy.bandcamp.com</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Ditching Google Analytics]]></title>
    <link href="http://brandon.invergo.net/news/2011-11-18-ditching-google-analytics.html"/>
    <updated>2011-11-18 10:25</updated>
    <id>http://brandon.invergo.net/news/2011-11-18-ditching-google-analytics.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've decided to stop using Google Analytics to analyze traffic on my site. I
don't think the service really goes to the extreme as far as tracking users,
since it only allows me to see traffic sources (referring sites, search 
terms, etc.) and which areas of my site people are checking out, so I wouldn't
necessarily consider it to be evil. Nevertheless, I've grown tired of the trend
of analyzing and tracking users across the web for any reason. And let's be
honest, it seems very unnecessary to me for a site like mine to leave a
cookie on your computer. </p>

<p>Do I really need to know how much time anonymous users are spending reading
a particular blog post? Do I really need to know what search terms are
leading people to my site? Perhaps if this were a bigger site or if it
actually had commercial purposes, sure, the info would be useful. As
it stands, though, it basically amounts to tracking people in order to stroke my
own ego. So, instead, if you enjoy something that I've written, be it a blog
post, a piece of software, or a song, I'd be much happier if you drop me an
email and tell me, or if you just pass the link along to others. I don't need to
know that you enjoyed it for precisely 4'35" before leaving the site, never to
return.</p>

<p>edit: I added a Flattr button on the side over there, in case you <em>really</em> want
to show me your appreciation :)</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Accessing the Gnome clipboard in Uzbl]]></title>
    <link href="http://brandon.invergo.net/news/2011-10-31-accessing-the-gnome-clipboard-in-uzbl.html"/>
    <updated>2011-10-31 17:36</updated>
    <id>http://brandon.invergo.net/news/2011-10-31-accessing-the-gnome-clipboard-in-uzbl.html</id>
    <content type="html"><![CDATA[<p></p>

<p>In my <a href="http://brandon.invergo.net/blog/2011/10/27/my-gnome-shell-workflow-after-6-months/">post about my Gnome-Shell workflow</a>, I stated that a trouble I had with browsing with Uzbl in 
Gnome was it usage of the primary selection clipboard via xclip. I had a 
hunch that it would be easy to get around this and, indeed, it was. It 
turns out, when you actually read the man pages for software, you end up 
learning a lot! xclip allows you to specify which selection to use, so it 
was as simple as adding the <code>-selection clipboard</code> flag in the appropriate 
places in my Uzbl config file. The copying &amp; pasting keybinds section of my
config now looks like this:</p>

<pre><code># Yanking &amp; pasting binds
@cbind  Yu  = sh 'echo -n "$UZBL_URI" | xclip'
@cbind  yu  = sh 'echo -n "$UZBL_URI" | xclip -selection clipboard'
@cbind  yU  = sh 'echo -n "" | xclip' '\@SELECTED_URI -selection clipboard'
@cbind  yy  = sh 'echo -n "$UZBL_TITLE" | xclip -selection clipboard'

# Go the page from primary selection
@cbind  P   = sh 'echo "uri $(xclip -o | sed s/\\\@/%40/g)" &gt; "$UZBL_FIFO"'
# Go to the page in clipboard
@cbind  p   = sh 'echo "uri $(xclip -selection clipboard -o | sed s/\\\@/%40/g)" &gt; "$UZBL_FIFO"'
</code></pre>

<p>Since I use Gnome's clipboard more often than the primary selection, I set
the lowercase bindings to copy/paste there, while the uppercase bindings use the
primary selection. And there you have it: better clipboard integration with
Gnome in Uzbl.</p>

<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">Accsessing the Gnome Clipboard in Uzbl</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://brandon.invergo.net" property="cc:attributionName" rel="cc:attributionURL">Brandon Invergo</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[My Gnome-Shell Workflow After 6 Months]]></title>
    <link href="http://brandon.invergo.net/news/2011-10-27-my-gnome-shell-workflow-after-6-months.html"/>
    <updated>2011-10-27 21:22</updated>
    <id>http://brandon.invergo.net/news/2011-10-27-my-gnome-shell-workflow-after-6-months.html</id>
    <content type="html"><![CDATA[<p></p>

<p>I've been a happy user of Gnome 3 since it was first released, first via the 
(at the time) very unstable Ubuntu PPA and after a short while, on an Arch Linux
install built from the ground up to run it. The internet is awash with 
ridiculous arguments about whether or not Gnome 3 and, in particular, Gnome-
Shell are good. Personally I couldn't care less about these arguments and I 
don't wish to recapitulate them here. My Gnome 2 usage was already approaching 
this new workflow well before Gnome 3 was released. I had only a top panel that 
I barely used (auto-hidden, actually), an empty desktop, and I launched 
everything via Gnome Do. So adjusting to Gnome-Shell was pretty easy for me. 
Nonetheless, I've made some tweaks over time and I figured I'd share them, 
especially now that most of the major distros come with it installed or 
available in the repositories, many new users are likely to give it a try. For 
those who are open to giving it a chance, hopefully some of these tweaks and 
tips will make the experience even smoother for them. Some tips are old hat, 
while I haven't seen some other ones mentioned anywhere.</p>

<p><strong>INSTALL GNOME-TWEAK-TOOL</strong></p>

<p>This is a must-do, of course, and it should be available in your distro's 
repositories. It makes handling some advanced or "hidden" settings of Gnome-
Shell a bit easier. You can use it to set default system fonts, change themes, 
manage extensions, etc. I would also recommend familiarizing yourself with the 
dconf-editor, which provides access to even more settings (though in a less 
user-friendly manner). You can launch it by hitting Alt-F2 and typing in 
"dconf-editor".</p>

<p>As for me, I actually don't change much. For my fonts, I use Cantarell as my 
default, Sans for documents, Monospace for, well, monospace, and Sans for 
window titles, all at size 9 (1024x768 resolution...I'd have them a bit bigger 
on a bigger screen). Hinting is at medium and I use Rgba antialiasing. I set it 
to show the date in the clock, for its obvious usefulness. Everything else is 
set to the default. Most notably, I chose to stick with the default of windows 
only having a close button (sans minimize and maximize buttons). For maximizing, 
I just use the keyboard (Alt-F10) or the snap feature (drag the titlebar to the 
top of the screen). I don't minimize. In my mind, if a window needs to be 
minimized, than it's on the wrong workspace.</p>

<p><strong>USE EXTENSIONS</strong></p>

<p>Everyone seems to complain that Gnome-Shell lacks customizability, which I find 
to be an utterly ridiculous claim, considering that basically the whole of it is 
open to extensions for modifying it to your liking. It baffles me how the 
community could complain about this, but then turn around and be ecstatic over 
window managers like Awesome or dwm, which have only the barest functionality 
until you start extending or patching them. Anyway, at this point there are many 
extensions available and they are more or less easy to manage with gnome-tweak-
tool, though to be honest extension management is an area that Gnome could 
improve. If you want an always-visible dock or a traditional Gnome menu, they're 
just an extension away. As for me and my workflow, though, I only use a few 
extensions:</p>

<ul>
<li><p><em>no-a11y</em>: Gnome's efforts to make their desktop accessible are admirable, but 
I think the majority of people don't need the accessibility options, so that 
icon in the panel is just taking up space. I use this extension to hide it.</p></li>
<li><p><em>system-monitor-applet</em>: I generally buy into the idea that the panel 
notification area of Gnome 2 or any other Windows 95 clone quickly becomes an 
obnoxious, distracting mess, so I'm glad that Gnome 3 has reduced it to just the 
necessities. That said, I'm running a 5 year old laptop and I often do 
computationally intensive tasks, so for me, having a CPU meter visible at all 
times is necessary. Using the plugin's customizability, I've made sure that it's 
grayscale like the rest of the panel, setting the "User" process color to 
<code>#CCCCCC</code>, the "System" process color to <code>#474747</code> and the "Other" process color 
to <code>#262626</code>, with a transparent background. I turned the text off and the graph 
width is 25. I only use the CPU meter, though of course the RAM meter is handy 
too. A quick left-click on the graph brings up a lot more useful information.</p></li>
<li><p><em>alternative-status-menu</em>: One of the contentious changes in Gnome-Shell is, 
of course, the option to power off being hidden unless you hold the Alt key, 
with only the option to suspend being otherwise shown. I use a laptop, so to 
suspend the system, I simply close the lid. I use this extension to make "Power 
Off" a permanent option.</p></li>
<li><p><em>window-navigator</em>: I like to use the keyboard and avoid the mouse as much as 
possible (as discussed next). The Activities overlay is only partially keyboard
navigable, only in the "Applications" area. This extension allows you to use the
keyboard to navigate the "Windows" area: hold Alt to see a number over each of 
your open windows and press a number to bring that window into focus. Similarly,
hold Ctrl and hit a number to select a workspace.</p></li>
</ul>

<p><strong>USE YOUR KEYBOARD</strong></p>

<p>A big complaint for some is that Gnome-Shell makes your mouse travel too far to 
get anything done. That may be the case, but the better solution is to just use 
your keyboard for as much as possible. It, without a doubt, requires less 
movement than any mouse-based interaction, even in Gnome 2, allowing you to do 
things the moment they come to mind. So, break the habit of typing and then 
reaching for your mouse and just keep your hands on that home row. In 
particular:</p>

<ul>
<li><p><em>Launching applications</em>: as you probably know by now, hitting the Mod/Windows
key opens the Activities overlay, where you can immediately start typing to find
the application you want. A little-talked about feature of the latest Gnome-
Shell release (3.2.1) is that it now sorts the search results by frequency of 
use, which is great. To launch Firefox, I simply hit Mod, then "F", and then 
Enter. This is also a nice way to easily find contacts or settings, of course.</p></li>
<li><p><em>Switching windows</em>: Alt-Tab is, of course, an old, familiar key combination. 
It changed a bit in Gnome 3 to only switch between applications, so if you have 
five windows of one application open, they will appear as one item in the 
application switcher. It takes a bit to get used to it, but you can press Alt-` 
(or whatever key is above Tab on your keyboard) to switch between open windows 
of an application. Also, from the Alt-Tab application switcher, you can navigate 
with the arrow keys: left and right to switch between applications and down and 
up to move into and out of an application's window list. Once you get used to 
this difference (I admit I still trip up on it sometimes), it's actually really 
nice; it just takes a bit of muscle memory training. This one will come into
play later in the article.</p></li>
<li><p><em>Launching applications by shortcut</em>: By default, if you try to launch an 
application in Gnome-Shell when an instance is already running, the view will 
switch to that instance, rather than launching a new one. I find that, in most 
cases, this isn't a problem as I almost always only have one instance of a 
program running. There are, of course, a couple notable exceptions for me: the 
terminal and the file manager. For these, I set up keyboard shortcuts to launch 
them. You can do this in System Settings -> Keyboard -> Shortcuts. You can set 
many shortcuts here. In the launchers section, I set "Home folder" to have a 
shortcut of Ctrl-Alt-N ("N" for "Nautilus") and "Launch terminal" to have a 
shortcut of Ctrl-Alt-T. Now when I hit these key combos, a new instance of the 
terminal or the file manager are launched no matter how many other instances are
running. If you need a special launcher (i.e. I could imagine wanting one for a 
text editor), you can do so under "Custom Shortcuts". Note: I have had some 
problems doing these settings before, so I've had to set them the hard way in 
dconf-editor (in org.gnome.settings-daemon.plugins.media-keys)</p></li>
<li><p><em>Vim-like bindings for switching workspaces</em>: This is a personal preference: I
like the Vim keybindings since they allow me to keep my fingers on the home row.
So, in the aforementioned keyboard shortcut settings, under "Navigation", I 
changed "Move to workspace above" to be Ctrl-Alt-B and "Move to workspace below"
to Ctrl-Alt-F to be like Vim's page up and page down shortcuts. Similarly, I set
"Move window one workspace up" to Shift-Ctrl-Alt-B and "Move window one 
workspace down" to Shift-Ctrl-Alt-F. I use these shortcuts very frequently, so 
that I essentially never use the workspace picker in the Activities overview.</p></li>
<li><p><em>Vim-like bindings for the browser</em>: Continuing from the last one, I tried to 
make my keybindings consistent throughout my usual tasks. So, for browsing, I 
use Uzbl (more on that below), which I set to use basic Vim movement keys (jkhl, 
Ctrl-F / Ctrl-B, etc.). You can also use Pentadactyl for Firefox, though I 
haven't tried this yet.</p></li>
<li><p><em>Make Caps Lock an extra Ctrl key</em>: Ok, this isn't Gnome-specific but it's a 
huge help. I use keyboard shortcuts all the time and I never type in all caps, 
so it makes no sense that the key conveniently next to my finger is useless, 
while one of the most useful keys is out of the way in the corner. So, under 
Settings -> Region and Language -> Layouts -> Options..., I make Caps Lock an 
extra Ctrl key (under "Ctrl Key Position"). If you do use Caps Lock from time to
time, you can also just swap the two keys. This is another thing that takes a 
bit of time to get used to but once you do, you can never go back.</p></li>
</ul>

<p><strong>INSTALL ALACARTE</strong></p>

<p>This is a small tip but it's something that tripped me up at first. 
Unfortunately, not all software is built to install nicely under Gnome, so you 
have to add them yourself to the Activities "Applications" area. Gnome doesn't 
have a built-in way to do this, but the application Alacarte makes editing the 
available applications simple. </p>

<p><strong>USE THE DARK ADWAITA THEME</strong></p>

<p>I prefer dark themes and the dark Adwaita theme that became available with 3.2 
is really nice, though I can't understand why it would only be used for some 
applications (picture viewer, movie player). I set it to instead be the default 
theme for all applications that support it, which means for all GTK 3 
applications. To do this, I have the file <code>~/.config/gtk-3.0/settings.ini</code> 
containing:</p>

<pre><code>[Settings]
gtk-theme-name = Adwaita
gtk-fallback-icon-theme = gnome
# next option is applicable only if selected theme supports it
gtk-application-prefer-dark-theme = true
# set font name and dimension
gtk-font-name = Sans 10
</code></pre>

<p>"gtk-application-prefer-dark-theme" is of course the setting of interest. Now, 
applications which are not yet using GTK 3 will stand out if you're using the 
default, light GTK 2 theme, which is annoying, but I like the dark theme too 
much in general to go back (and I've been too lazy to do anything about that GTK
2 theme problem).</p>

<p><strong>CHANGE YOUR BROWSING HABITS</strong></p>

<p>This one won't be for everyone and bears some explanation. A problem with the 
old taskbar-oriented method of window management was that, as more windows were 
opened, the taskbar became a cluttered mess. This was especially a problem 
before tabbed web browsers came out, so that every webpage that you opened led 
to another item in the task bar. This problem was cleared up by the 
aforementioned tabbed browsers, as well as window grouping in the task bar. In 
the former case, though, the problem was just shifted. Instead of a cluttered 
taskbar, we ended up with cluttered tab bars. With enough tabs open in Firefox, 
you have nothing left to go by but the favicon and a one or two characters to 
figure out which tab contains what. In other browsers like Gnome's Epiphany, the 
tabs don't shrink but instead enter out view and you must scroll the tab bar to 
find what you want.</p>

<p>So now we're using Gnome-Shell, which completely does away with the task bar, 
but then we spend most of our time in a browser, which shoves something 
equivalent back into our lives. I realized that if I just stop using tabs and 
open everything in a new browser window, I can then use some of the niceties of 
Gnome-Shell to better manage my browsing sessions. Heresy, I know! But think 
about it. If you use one workspace for browsing, and you open all new pages in a
new browser, you can get a much better overview from Gnome-Shell of what pages 
you have open than what's offered by a tab bar. For a quick glance, you can hit 
the Mod/Windows key to see a small representation as well as the full title of 
every site you have open. With the <em>window-navigator</em> extension, you can quickly 
select one by number or you can just click by mouse. If you're not sure, you can 
use the mouse wheel to zoom in on one of the windows. And for quick scrolling 
through your open sites, start pracitcing with Alt-` to switch between all the 
open browser windows. Once again, you get a small preview and you can see the 
full page title.</p>

<p><img src="../img/posts/gnome_shell_web_overview.png" alt="web overview" title="" /></p>

<p>Now, without using tabs, you can get rid of the tab bar entirely, which takes up
valuable vertical screen real estate. While the latest versions of Firefox 
remedy that problem a bit, the tabbed browsing concept is so deeply integrated 
into Firefox that I found it to be distracting. Epiphany is a good possibility, 
because you can easily hide not only the tabs, but you can also go all out and 
hide the toolbar and the menubar (only in version 3.2 for the menubar), leaving 
nothing between you and your web content but the Shell panel and the window 
title bar (hit Ctrl-L to temporarily open up the toolbar to type in an address). 
Unfortunately, Epiphany isn't very keyboard-friendly, in my opinion.</p>

<p>In the end, I went with <a href="http://uzbl.org">Uzbl</a>, which is incredibly 
customizable and keyboard-friendly, albeit a bit less friendly to get set up. It 
lacks any widgets (buttons, menus, etc.)  with the exception of a tiny, Vim-like 
status bar at the bottom. I can open a new browser window just by tapping the 
'w' key, or I can open links in new windows by middle-clicking or by bringing up 
visual link tips by hitting 'Fl' and then typing the number of the link I want 
to follow. Best of all, it doesn't even support tabs! The view of the developer, 
and correctly so, in my opinion, is that it should be up to the window manager 
to manage your open sites. Recapitulating window management in a browser is just 
wasteful and frustrating.</p>

<p>Unfortunately, out-of-the-box, Uzbl didn't play nicely on my system
with Gnome- Shell's window management. I couldn't do the
Alt-[button-above-Tab] window switching since Gnome- Shell counted
each Uzbl window as a separate application. In order to get it working
properly, I had to create its "Applications" entry manually (not with
Alacarte) by creating the file
<code>/usr/share/applications/uzbl-core.desktop</code>, which contains:</p>

<pre><code>[Desktop Entry]
Exec=uzbl-browser -g 'maximized'
Version=1.0
Type=Application
Terminal=false
Icon[en_US]=/usr/share/uzbl/examples/data/uzbl.png
Name[en_US]=Uzbl-core
Name=Uzbl-core
Icon=/usr/share/uzbl/examples/data/uzbl.png
Categories=Network;GTK;WebBrowser;
MimeType=text/html;text/xml;application/xhtml+xml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
</code></pre>

<p>You can see that I start the browser maximized, since that's how I like to 
browse. Also important is that the Name field is the same as the name of the 
.desktop file (Uzbl-core), which is the the name of the Uzbl process as 
recognized by Gnome-Shell. You'll notice that it's not named "Uzbl-browser" like 
the executable command implies. This is because "uzbl-browser" is actually a 
long shell script that sets up and runs a configured "uzbl-core" instance. The 
MimeType section is important for letting Gnome know that this is a browser, 
allowing me to set it as my default for opening web pages, for example. Finally, 
the StartupNotify field is what Gnome-Shell uses to treat all open windows as 
one application.  </p>

<p>Unfortunately, I still have to use Firefox sometimes for two reasons. One is 
that I've compiled Uzbl to use GTK 3, while Adobe Flash still depends on GTK 2. 
I find Gnash and Lightspark's performance to be a bit underwhelming and I 
haven't had success using nspluginwrapper to be able to use the GTK 2 plugin in 
GTK 3. The other reason is that not all Gnome programs play nicely with Uzbl. 
For example, if I set Uzbl as my default browser, I cannot open links from 
Evolution or Gwibber. In Liferea, on the other hand, I can manually specify the 
command to open links: uzbl-browser %s -g 'maximized'. Also, Uzbl only uses the 
X clipboard (ie like when you highlight text with the mouse and then middle-
click to paste), which can be a bit annoying to work with, but I'm 99% sure I 
can write a quick Python/GTK script to get around that and use the Gnome 
clipboard. I've just been lazy. Anyway, all that aside, I still use Uzbl for my 
heavy browisng sessions because it's just so nice browsing this tabless way. 
Firfox only comes out when it absolutely has to.</p>

<p><strong>CONCLUSIONS</strong></p>

<p>Hopefully you've found this to be helpful and you've  been able to find one or 
two things in my workflow that you can integrate into your own. For most tasks 
I've found myself to be quite pleased with how I work in Gnome-Shell and I tend 
to be very efficient. Nonetheless, nothing's perfect. For my part, I think 
Gnome-Shell could still use some more keyboard configurability, particularly 
with window management. I do like that you can snap windows to the sides of the 
screen, but I wish there were a way to do it with the keyboard and not just with 
the mouse (you can use a shortcut to maximize vertically or horizontally, but 
the window doesn't move). And actually, I think being able to snap to a 4x4 grid 
would be even greater, allowing, for example, two terminals stacked vertically. 
For most of my typical day-to-day stuff, this doesn't get in the way. However, 
when I'm programming I tend to have more windows open on a single workspace, so 
having some keyboard window management would be great. Luckily, Gnome-Shell 
keeps improving with each release, so hopefully we can look forward to such 
features in the near future.</p>

<p><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"><img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-sa/3.0/88x31.png" /></a><br /><span xmlns:dct="http://purl.org/dc/terms/" property="dct:title">My Gnome-Shell Workflow After 6 Months</span> by <a xmlns:cc="http://creativecommons.org/ns#" href="http://brandon.invergo.net" property="cc:attributionName" rel="cc:attributionURL">Brandon Invergo</a> is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/deed.en_US">Creative Commons Attribution-ShareAlike 3.0 Unported License</a>.</p>

<p></p>]]></content>
  </entry>

  <entry>
    <title type="html"><![CDATA[Shiny new site]]></title>
    <link href="http://brandon.invergo.net/news/2011-10-26-shiny-new-site.html"/>
    <updated>2011-10-26 23:04</updated>
    <id>http://brandon.invergo.net/news/2011-10-26-shiny-new-site.html</id>
    <content type="html"><![CDATA[<p></p>

<p>Hey look, I made a new site. A couple things prompted the change. The old site 
was built using <a href="http://www.joomla.org">Joomla</a>, which I guess I like in general 
but it was complete overkill for my needs. Another problem is that I decided 
that, while no server is completely secure, the fewer entrances there are, the 
fewer chances for exploitation exist. Joomla is, in the end, pretty complicated,
with log-ins, forms, etc. Furthermore, from a laziness perspective, updating the
is far too involved for just a little blog site that I rarely change. So I think
my outdated Joomla set-up was just not worth maintaining anymore. </p>

<p>Of course, I hate designing anything in HTML, so that was out of the question. 
Enter <a href="http://www.octopress.org">Octopress</a>, which lets me write posts in the 
editor of my choice (no more unreliable web-based WYSIWYG...only vim from now 
on) using Markdown and then converts them to HTML for me. Those are just one 
rsync away from being live online. It feels so much cleaner and simpler than 
Joomla or Drupal and is really exactly what I was looking for. Security-wise 
(not that I'm really a juicy target or anything), there are just whatever 
typical security holes might exist on my server itself via SSH, FTP, etc, which 
are out of my control. </p>

<p>Oh, I decided not to carry over any of my old blog posts. Fresh start!</p>

<p></p>]]></content>
  </entry>
</feed>
